<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ShareFile.Api.Client.Core</name>
    </assembly>
    <members>
        <member name="P:ShareFile.Api.Client.Configuration.UseHttpMethodOverride">
            <summary>
            Ensure all API requests are executed as POST reqeusts with an override header specified
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Configuration.AutoComposeUri">
            <summary>
            Automatically compose object uri before returning result
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Configuration.HttpTimeout">
            <summary>
            Timeout, in milliseconds, for API requests (excluding uploads transfer)
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Configuration.ProxyConfiguration">
            <summary>
            Register ProxyConfiguration to be used for all requests
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Configuration.LogPersonalInformation">
            <summary>
            If true, then personal information (e.g. name and email) will be logged.
            <para>This should probably only be changed to true in a development environment.</para>
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Configuration.LogFullResponse">
            <summary>
            If true, then the full json object will be logged doing API calls. Otherwise, collections on the json object
            will not be logged. Metadata about the collection will be logged instead.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Configuration.LogCookiesAndHeaders">
            <summary>
            If true, all cookies and headers associated with a request will be logged.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Configuration.SupportedCultures">
            <summary>
            Header value to send on every API call.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Configuration.ClientCapabilities">
            <summary>
            Key represents providers for the collection of capabilities to be sent as a header on each API call.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Configuration.UserAgent">
            <summary>
            User-Agent header value to be passed on each API call
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Converters.LoggingConverter">
            <summary>
            This converter is used for logging. It is one-way (write only) and does not necessarily produce valid JSON.
            <para>The purpose of the converter is to optionally exclude personal information and 
            optionally only log metadata about IEnumerable properties.</para>
            </summary>
        </member>
        <member name="M:ShareFile.Api.Client.Converters.ODataConverter.Create(System.Type,ShareFile.Api.Models.ODataObject,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a ShareFile ODataObject instance given a jObject instance. 
            </summary>
            <remarks>
            This method will look first for the odata.metadata property in the jObject instance. If
            not found, it will fallback to the URL representation, and finally, to the object ID. If
            all of these fail, the method will instantiate the requested type from JSON.NET, which 
            matches the type of the attribute. 
            The ODataFactory class provide create methods for each of these matches. 
            Metadata and URL are the "proper" ways to handle ODATA deserialization; the ID fallback is
            convinient for certain operations, but uses the ShareFile ID prefixes and should be avoided.
            </remarks>
            <param name="objectType"></param>
            <param name="oDataObject"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="T:ShareFile.Api.Client.Converters.ODataFactory">
            <summary>
            This class handles the creation of OData Objects from string-based specifications, mainly
            for deserialization operations. It uses several method to identify the serialized classes:
            the Odata metadata, the Odata Url, and the ID in certain cases - based on ShareFile ID 
            prefixes
            </summary>
        </member>
        <member name="M:ShareFile.Api.Client.Converters.ODataFactory.RegisterType``2">
            <summary>
            Allow consumers to regsiter type substitutions.
            </summary>
            <typeparam name="TNew">Type constructor to use in place of TReplace</typeparam>
            <typeparam name="TReplace">Type you want to replace</typeparam>
        </member>
        <member name="M:ShareFile.Api.Client.Converters.ODataFactory.Create(System.String)">
            <summary>
            Creates a Model class based on the type name, as a string.
            </summary>
            <remarks>
            This is not a terribly efficient method, should be used as catch-22 if you want a generic
            handler. If you know the return type, or at least the superclass, use Create passing the
            .NET Type object, which is more efficient.
            </remarks>
            <param name="cast">Type name. Either full namespace or just name will work. Entity set names 
            are also supported (e.g., Items for Item)</param>
            <param name="context">Optional request context</param>
            <param name="id">Optional id if you already know it. This method will use the ShareFile ID 
            prefixes to handle superclasses (e.g., cast=Items and id=fi* instantiate a File instance)</param>
            <returns>A subtype of ODataObject, matching the requested type/id. Returns null if type doesnt
            match any known type</returns>
        </member>
        <member name="M:ShareFile.Api.Client.Converters.ODataFactory.Create(System.Type,System.String,ShareFile.Api.Models.ODataObject,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a new instance of ODataObject of the specified type. 
            </summary>
            <remarks>
            If Type is Item or
            Principal, the appropriate sub-type is instantiated based on ID. This is not kosher from
            ODATA perspective: the Type Cast parameter in metadata should be used instead.. 
            The method will use reflection to find the type constructor. Objects must have a
            constructor (string, context) or (string, context, string) to be found. Otherwise,
            a ODataObject instance is created instead.
            </remarks>
            <param name="type"></param>
            <param name="cast"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccessControlsEntity.Get(System.Uri)">
            <summary>
            Get AccessControl by ID
            </summary>
            <remarks>
            Retrieves a single Access Control entry for a given Item and Principal
            </remarks>
            <returns>
            A single AccessControl object matching the query
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccessControlsEntity.GetByItem(System.Uri)">
            <summary>
            Get AccessControl List By Item
            </summary>
            <remarks>
            Retrieves the Access Control List for a given Item.
            </remarks>
            <param name="url"></param>
            <returns>
            Access Control List of the given object ID.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccessControlsEntity.CreateByItem(System.Uri,ShareFile.Api.Models.AccessControl,System.Boolean,System.Boolean,System.String)">
            <summary>
            Create AccessControl
            </summary>
            <example>
            {
            "Principal":{"url":"https://account.sf-api.com/v3/Groups(id)"},
            "CanUpload":true,
            "CanDownload":true,
            "CanView":true,
            "CanDelete":true,
            "CanManagePermissions":true,
            "Message":"Message"
            }
            </example>
            <remarks>
            Creates a new Access Controls entry for a given Item. Access controls can only define a single Principal,
            which can be either a Group or User. The 'Principal' element is specified as an object - you should populate
            either the URL or the ID reference.
            </remarks>
            <param name="url"></param>
            <param name="accessControl"></param>
            <param name="recursive"></param>
            <param name="message"></param>
            <param name="sendDefaultNotification"></param>
            <returns>
            the created or modified AccessControl instance
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccessControlsEntity.UpdateByItem(System.Uri,ShareFile.Api.Models.AccessControl,System.Boolean)">
            <summary>
            Update AccessControl
            </summary>
            <example>
            {
            "Principal":{"Email":"user@domain.com"},
            "CanUpload":true,
            "CanDownload":true,
            "CanView":true,
            "CanDelete":true,
            "CanManagePermissions":true
            }
            </example>
            <remarks>
            Updates an existing Access Controls of a given Item. The Principal element cannot be modified, it is provided
            in the Body to identity the AccessControl element to be modified. You can provide an ID, Email or URL on the
            Principal object.
            </remarks>
            <param name="url"></param>
            <param name="accessControl"></param>
            <param name="recursive"></param>
            <returns>
            the created or modified AccessControl instance
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccessControlsEntity.Delete(System.Uri)">
            <summary>
            Delete AccessControl
            </summary>
            <remarks>
            Deletes an AccessControl entry by itemID and principalID. This method does not return any object, a 204 (No Content)
            response indicates success.
            </remarks>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccessControlsEntity.BulkSet(System.Uri,ShareFile.Api.Models.AccessControlsBulkParams)">
            <summary>
            Create or Update multiple AccessControls for a given Item
            </summary>
            <example>
            {
            "NotifyUser":true,
            "NotifyMessage":"msg",
            
            "AccessControlParams":
            [
            {
            "AccessControl":
            {
            "Principal" : { "Id":"existing_user_id" },
            "CanUpload" : true,
            "CanDownload" : false,
            "CanView" : true
            },
            "NotifyUser":false
            },
            {
            "AccessControl":
            {
            "Principal" : { "Id":"group_id" },
            "CanUpload" : false,
            "CanDownload" : true,
            "CanView" : true
            },
            "Recursive":true
            },
            {
            "AccessControl":
            {
            "Principal" : { "Email":"new_or_existing_user@a.com" },
            "CanUpload" : false,
            "CanDownload" : true,
            "CanView" : true
            }
            }
            ]
            }
            </example>
            <remarks>
            All the AccessControls are created or updated for a single Item identified by the Item id in the URI. AccessControl.Item Ids are not allowed.
            If an AccessControl doesn't specify NotifyUser or NotifyMessage property their values are inherited from the corresponding
            top-level properties.
            The Principal can be identified by Id or Email (Users). If a User with the specified email does not exist it will be created.
            Defaults for NotifyUser and Recursive are false.
            See AccessControlsBulkParams for other details.
            </remarks>
            <param name="url"></param>
            <param name="bulkParams"></param>
            <returns>
            AccessControlBulkResult
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccessControlsEntity.BulkDelete(System.Uri,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Delete multiple access controls
            </summary>
            <example>
            ["id1","id2",...]
            </example>
            <param name="folderUrl"></param>
            <param name="principalIds"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccessControlsEntity.NotifyUsers(System.Uri,ShareFile.Api.Models.NotifyUsersParams)">
            <summary>
            Notify users that they have access to the parent folder
            </summary>
            <example>
            [
            {
            UserIds: ["id1", "id2"],
            CustomMessage: "Message content goes here"
            }
            ]
            </example>
            <remarks>
            All users should have access to the parent folder
            </remarks>
            <param name="folderUrl"></param>
            <param name="notifyUsersParams"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.EntityBase.GetEntityUriFromId(System.String)">
            <summary>
            Will return a composed Uri that will point to <see name="Entity"/>(<see name="id"/>) for the BaseUri
            </summary>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccessControlsEntity.Get(System.Uri)">
            <summary>
            Get AccessControl by ID
            </summary>
            <remarks>
            Retrieves a single Access Control entry for a given Item and Principal
            </remarks>
            <returns>
            A single AccessControl object matching the query
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccessControlsEntity.GetByItem(System.Uri)">
            <summary>
            Get AccessControl List By Item
            </summary>
            <remarks>
            Retrieves the Access Control List for a given Item.
            </remarks>
            <param name="url"></param>
            <returns>
            Access Control List of the given object ID.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccessControlsEntity.CreateByItem(System.Uri,ShareFile.Api.Models.AccessControl,System.Boolean,System.Boolean,System.String)">
            <summary>
            Create AccessControl
            </summary>
            <example>
            {
            "Principal":{"url":"https://account.sf-api.com/v3/Groups(id)"},
            "CanUpload":true,
            "CanDownload":true,
            "CanView":true,
            "CanDelete":true,
            "CanManagePermissions":true,
            "Message":"Message"
            }
            </example>
            <remarks>
            Creates a new Access Controls entry for a given Item. Access controls can only define a single Principal,
            which can be either a Group or User. The 'Principal' element is specified as an object - you should populate
            either the URL or the ID reference.
            </remarks>
            <param name="url"></param>
            <param name="accessControl"></param>
            <param name="recursive"></param>
            <param name="message"></param>
            <param name="sendDefaultNotification"></param>
            <returns>
            the created or modified AccessControl instance
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccessControlsEntity.UpdateByItem(System.Uri,ShareFile.Api.Models.AccessControl,System.Boolean)">
            <summary>
            Update AccessControl
            </summary>
            <example>
            {
            "Principal":{"Email":"user@domain.com"},
            "CanUpload":true,
            "CanDownload":true,
            "CanView":true,
            "CanDelete":true,
            "CanManagePermissions":true
            }
            </example>
            <remarks>
            Updates an existing Access Controls of a given Item. The Principal element cannot be modified, it is provided
            in the Body to identity the AccessControl element to be modified. You can provide an ID, Email or URL on the
            Principal object.
            </remarks>
            <param name="url"></param>
            <param name="accessControl"></param>
            <param name="recursive"></param>
            <returns>
            the created or modified AccessControl instance
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccessControlsEntity.Delete(System.Uri)">
            <summary>
            Delete AccessControl
            </summary>
            <remarks>
            Deletes an AccessControl entry by itemID and principalID. This method does not return any object, a 204 (No Content)
            response indicates success.
            </remarks>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccessControlsEntity.BulkSet(System.Uri,ShareFile.Api.Models.AccessControlsBulkParams)">
            <summary>
            Create or Update multiple AccessControls for a given Item
            </summary>
            <example>
            {
            "NotifyUser":true,
            "NotifyMessage":"msg",
            
            "AccessControlParams":
            [
            {
            "AccessControl":
            {
            "Principal" : { "Id":"existing_user_id" },
            "CanUpload" : true,
            "CanDownload" : false,
            "CanView" : true
            },
            "NotifyUser":false
            },
            {
            "AccessControl":
            {
            "Principal" : { "Id":"group_id" },
            "CanUpload" : false,
            "CanDownload" : true,
            "CanView" : true
            },
            "Recursive":true
            },
            {
            "AccessControl":
            {
            "Principal" : { "Email":"new_or_existing_user@a.com" },
            "CanUpload" : false,
            "CanDownload" : true,
            "CanView" : true
            }
            }
            ]
            }
            </example>
            <remarks>
            All the AccessControls are created or updated for a single Item identified by the Item id in the URI. AccessControl.Item Ids are not allowed.
            If an AccessControl doesn't specify NotifyUser or NotifyMessage property their values are inherited from the corresponding
            top-level properties.
            The Principal can be identified by Id or Email (Users). If a User with the specified email does not exist it will be created.
            Defaults for NotifyUser and Recursive are false.
            See AccessControlsBulkParams for other details.
            </remarks>
            <param name="url"></param>
            <param name="bulkParams"></param>
            <returns>
            AccessControlBulkResult
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccessControlsEntity.BulkDelete(System.Uri,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Delete multiple access controls
            </summary>
            <example>
            ["id1","id2",...]
            </example>
            <param name="folderUrl"></param>
            <param name="principalIds"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccessControlsEntity.NotifyUsers(System.Uri,ShareFile.Api.Models.NotifyUsersParams)">
            <summary>
            Notify users that they have access to the parent folder
            </summary>
            <example>
            [
            {
            UserIds: ["id1", "id2"],
            CustomMessage: "Message content goes here"
            }
            ]
            </example>
            <remarks>
            All users should have access to the parent folder
            </remarks>
            <param name="folderUrl"></param>
            <param name="notifyUsersParams"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.Get(System.String)">
            <summary>
            Get current Account
            </summary>
            <remarks>
            Retrieves information about the Account defined in the call subdomain
            </remarks>
            <param name="id"></param>
            <returns>
            The subdomain account information
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.GetBranding">
            <summary>
            Get current Account branding
            </summary>
            <remarks>
            Retrievs Branding information about the subdomain account.
            This operation does not require authentication.
            </remarks>
            <returns>
            Branding information for a given sharefile account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.UpdateBranding(ShareFile.Api.Models.Account)">
            <summary>
            Modify the Branding for this account
            </summary>
            <remarks>
            Modifies Branding information about the subdomain account.
            This operation requires authentication.
            </remarks>
            <returns>
            Branding information for a given sharefile account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.GetEmployees">
            <summary>
            Get List of current Account Employees
            </summary>
            <remarks>
            Retrives the list of Employees in the Account
            Employees are named users in the Account.
            </remarks>
            <returns>
            A Feed containing all Employees Contacts in the account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.GetClients">
            <summary>
            Get List of current Account Clients
            </summary>
            <remarks>
            Retrieves the list of Clients in the Account.
            Clients are restricted users of an Account, that can receive and send files
            to Employees, but have no other permissions besides basic sharing with Employees.
            </remarks>
            <returns>
            A Feed containing all Clients in the account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.GetAddressBook(System.String,System.String)">
            <summary>
            Get Account AddressBooks
            </summary>
            <remarks>
            Retrieves an address book from the account.
            Address Books are the contacts of Eployees and Clients, maintained on a personal or
            account-wide basis (shared).
            </remarks>
            <param name="type"></param>
            <param name="searchTerm"></param>
            <returns>
            A Feed of Contact objects representing the Address Book retrieved
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.GetMobileSecuritySettings">
            <summary>
            Get Account Mobile Security Settings
            </summary>
            <remarks>
            Returns the Mobile device configuration settings for this account
            </remarks>
            <returns>
            The current mobile security configuration for this account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.GetProductDefaults">
            <summary>
            Get Account Product Defaults
            </summary>
            <returns>
            Account defaults
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.GetPreferences">
            <summary>
            Get Account Preferences
            </summary>
            <returns>
            Account preferences
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.GetSSO(System.String,System.String)">
            <summary>
            Get Account Single Sign-On Configuration
            </summary>
            <remarks>
            Retrieve the Single Sign-on configuration for the Account
            </remarks>
            <param name="provider"></param>
            <param name="idpEntityId"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.UpdateSSO(ShareFile.Api.Models.SSOAccountProvider,System.String)">
            <summary>
            Update Account Single Sign-On Configuration
            </summary>
            <example>
            {
            "LogoutUrl":"",
            "LoginUrl":"https://idp.com/signin",
            "IPRestrictions":"+all",
            "ForceSSO":true,
            "EntityID":"http://account.sf-api.com/saml/info",
            "SFEntityID":"http://idp.com/saml/info",
            "SPInitatedAuthContext":"exact",
            "SPInitatedAuthMethod":"urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport"
            }
            </example>
            <remarks>
            Modifies the Single Sign-on Configuration for this account.
            </remarks>
            <param name="sso"></param>
            <param name="provider"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.GetByUser(ShareFile.Api.Models.ODataObject,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get List of Accounts for User
            </summary>
            <example>
            {
            "password":"password"
            }
            </example>
            <remarks>
            Retrieve the list of Accounts associated with a given user
            All parameters to this call may be passed in the Post body as root JSON parameters, or in the URI -
            with the exception of password that must be provided in the POST body.
            This operation does not require authentication
            </remarks>
            <param name="username"></param>
            <param name="password"></param>
            <param name="employeesonly"></param>
            <param name="requirehomefolders"></param>
            <param name="singleplane"></param>
            <returns>
            The list of Accounts associated with this username/password.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.SendToEmail(System.String)">
            <summary>
            Email List of Accounts to User
            </summary>
            <remarks>
            Sends the list of accounts to the specified email address
            This operation does not require authentication
            </remarks>
            <param name="email"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.GetLoginAccessControlDomains">
            <summary>
            Get the Login Access Control List of domains
            </summary>
            <remarks>
            Retrieve the list of domains that are allowed or disallowed to login.
            Whether the list is an allow or disallow list
            is configured by the AccessControlType property. The domain names are checked against the domains of all the
            email addresses of the user that attempts to log in to the Account.
            </remarks>
            <returns>
            The Login Access Control List of domains for the Account.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.GetFolderAccessControlDomains">
            <summary>
            Get the Folder Access Control List of domains
            </summary>
            <remarks>
            Retrieve the list of domains that are allowed or disallowed to have access to folders. Whether the list is an allow or disallow list
            is configured by the AccessControlType property.
            
            The list blocks user access to folders by preventing adding a user to distribution groups or folders.
            The domain names are checked against the domains of all the email addresses of the user.
            This is an account-wide setting.
            </remarks>
            <returns>
            The Folder Access Control List of domains for the Account, e.g.
            
            {
            "AccessControlType" : "AllowedDomains",
            "Domains": ["domainA", "domainB", ...]
            }
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.CreateLoginAccessControlDomains(ShareFile.Api.Models.AccessControlDomains)">
            <summary>
            Create or replace the Login Access Control List of domains
            </summary>
            <example>
            {
            "AccessControlType" : "AllowedDomains",
            "Domains": ["domainA", "domainB", ...]
            }
            </example>
            <param name="AccessControlType"></param>
            <param name="Domains"></param>
            <returns>
            The new Login Access Control List of domains for the Account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.CreateFolderAccessControlDomains(ShareFile.Api.Models.AccessControlDomains)">
            <summary>
            Create or replace the Folder Access Control List of domains
            </summary>
            <example>
            {
            "AccessControlType" : "AllowedDomains",
            "Domains": ["domainA", "domainB", ...]
            }
            </example>
            <param name="AccessControlType"></param>
            <param name="Domains"></param>
            <returns>
            The new Folder Access Control List of domains for the Account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.UpdateLoginAccessControlDomains(ShareFile.Api.Models.AccessControlDomains)">
            <summary>
            Update the Login Access Control List of domains
            </summary>
            <example>
            {
            "AccessControlType" : "AllowedDomains",
            "Domains": ["domainA", "domainB", ...]
            }
            </example>
            <remarks>
            Merges the specified domains with existing domains in the list, and/or updates the AccessControlType. One of the parameters needs to be specified.
            </remarks>
            <param name="AccessControlType"></param>
            <param name="Domains"></param>
            <returns>
            The updated Login Access Control List of domains for the Account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.UpdateFolderAccessControlDomains(ShareFile.Api.Models.AccessControlDomains)">
            <summary>
            Update the Folder Access Control List of domains
            </summary>
            <example>
            {
            "AccessControlType" : "AllowedDomains",
            "Domains": ["domainA", "domainB", ...]
            }
            </example>
            <remarks>
            Merges the specified domains with existing domains in the list, and/or updates the AccessControlType. One of the parameters needs to be specified. It
            allows to add new domains to the list.
            </remarks>
            <param name="AccessControlType"></param>
            <param name="Domains"></param>
            <returns>
            The updated Folder Access Control List of domains for the Account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.DeleteLoginAccessControlDomains(ShareFile.Api.Models.AccessControlDomains)">
            <summary>
            Delete domains from the Logins Access Control List of domains
            </summary>
            <example>
            {
            "AccessControlType" : "AllowedDomains",
            "Domains": ["domainA", "domainB", ...]
            }
            </example>
            <remarks>
            Deletes the specified domains from the list.
            </remarks>
            <param name="AccessControlType"></param>
            <param name="Domains"></param>
            <returns>
            No content
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.DeleteFolderAccessControlDomains(ShareFile.Api.Models.AccessControlDomains)">
            <summary>
            Delete domains from the Folder Access Control List of domains
            </summary>
            <example>
            {
            "AccessControlType" : "AllowedDomains",
            "Domains": ["domainA", "domainB", ...]
            }
            </example>
            <remarks>
            Deletes the specified domains from the list.
            </remarks>
            <param name="AccessControlType"></param>
            <param name="Domains"></param>
            <returns>
            No content
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.RequireWebPop(System.String,System.String,System.Boolean)">
            <summary>
            Check if WebPop is required
            </summary>
            <param name="subdomain"></param>
            <param name="username"></param>
            <param name="singlePlane"></param>
            <returns>
            RequireWebPopResult
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.RequireSubdomain(System.String,System.Boolean)">
            <summary>
            Check if subdomain is required
            </summary>
            <param name="username"></param>
            <param name="singlePlane"></param>
            <returns>
            RequireSubdomainResult
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.FindSubdomain(ShareFile.Api.Models.FindSubdomainParams,System.Boolean)">
            <summary>
            Find Subdomain
            </summary>
            <example>
            {
            "UsernameShort":"usernameShort",
            "Password":"pass",
            "EmployeeOnly":false
            }
            </example>
            <remarks>
            Find the user account information based on the short username
            </remarks>
            <param name="findSubdomainParams"></param>
            <param name="singlePlane"></param>
            <returns>
            FindSubdomainResult
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.GetOutlookInformation">
            <summary>
            Get Outlook Information
            </summary>
            <returns>
            OutlookInformation
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.GetSSOInfo(System.String)">
            <summary>
            Get SSO Info
            </summary>
            <param name="subdomain"></param>
            <returns>
            SSOInfo
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.GetTenants">
            <summary>
            Get the tenants of a partner account
            </summary>
            <returns>
            List of tenant accounts managed by this partner account, if any
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.GetZones(System.String)">
            <summary>
            Get list of multi-tenant zones assigned to a tenant.
            </summary>
            <param name="parentid"></param>
            <returns>
            List of multi-tenant zones assigned to the tenant
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.Get(System.String)">
            <summary>
            Get current Account
            </summary>
            <remarks>
            Retrieves information about the Account defined in the call subdomain
            </remarks>
            <param name="id"></param>
            <returns>
            The subdomain account information
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.GetBranding">
            <summary>
            Get current Account branding
            </summary>
            <remarks>
            Retrievs Branding information about the subdomain account.
            This operation does not require authentication.
            </remarks>
            <returns>
            Branding information for a given sharefile account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.UpdateBranding(ShareFile.Api.Models.Account)">
            <summary>
            Modify the Branding for this account
            </summary>
            <remarks>
            Modifies Branding information about the subdomain account.
            This operation requires authentication.
            </remarks>
            <returns>
            Branding information for a given sharefile account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.GetEmployees">
            <summary>
            Get List of current Account Employees
            </summary>
            <remarks>
            Retrives the list of Employees in the Account
            Employees are named users in the Account.
            </remarks>
            <returns>
            A Feed containing all Employees Contacts in the account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.GetClients">
            <summary>
            Get List of current Account Clients
            </summary>
            <remarks>
            Retrieves the list of Clients in the Account.
            Clients are restricted users of an Account, that can receive and send files
            to Employees, but have no other permissions besides basic sharing with Employees.
            </remarks>
            <returns>
            A Feed containing all Clients in the account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.GetAddressBook(System.String,System.String)">
            <summary>
            Get Account AddressBooks
            </summary>
            <remarks>
            Retrieves an address book from the account.
            Address Books are the contacts of Eployees and Clients, maintained on a personal or
            account-wide basis (shared).
            </remarks>
            <param name="type"></param>
            <param name="searchTerm"></param>
            <returns>
            A Feed of Contact objects representing the Address Book retrieved
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.GetMobileSecuritySettings">
            <summary>
            Get Account Mobile Security Settings
            </summary>
            <remarks>
            Returns the Mobile device configuration settings for this account
            </remarks>
            <returns>
            The current mobile security configuration for this account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.GetProductDefaults">
            <summary>
            Get Account Product Defaults
            </summary>
            <returns>
            Account defaults
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.GetPreferences">
            <summary>
            Get Account Preferences
            </summary>
            <returns>
            Account preferences
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.GetSSO(System.String,System.String)">
            <summary>
            Get Account Single Sign-On Configuration
            </summary>
            <remarks>
            Retrieve the Single Sign-on configuration for the Account
            </remarks>
            <param name="provider"></param>
            <param name="idpEntityId"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.UpdateSSO(ShareFile.Api.Models.SSOAccountProvider,System.String)">
            <summary>
            Update Account Single Sign-On Configuration
            </summary>
            <example>
            {
            "LogoutUrl":"",
            "LoginUrl":"https://idp.com/signin",
            "IPRestrictions":"+all",
            "ForceSSO":true,
            "EntityID":"http://account.sf-api.com/saml/info",
            "SFEntityID":"http://idp.com/saml/info",
            "SPInitatedAuthContext":"exact",
            "SPInitatedAuthMethod":"urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport"
            }
            </example>
            <remarks>
            Modifies the Single Sign-on Configuration for this account.
            </remarks>
            <param name="sso"></param>
            <param name="provider"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.GetByUser(ShareFile.Api.Models.ODataObject,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get List of Accounts for User
            </summary>
            <example>
            {
            "password":"password"
            }
            </example>
            <remarks>
            Retrieve the list of Accounts associated with a given user
            All parameters to this call may be passed in the Post body as root JSON parameters, or in the URI -
            with the exception of password that must be provided in the POST body.
            This operation does not require authentication
            </remarks>
            <param name="username"></param>
            <param name="password"></param>
            <param name="employeesonly"></param>
            <param name="requirehomefolders"></param>
            <param name="singleplane"></param>
            <returns>
            The list of Accounts associated with this username/password.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.SendToEmail(System.String)">
            <summary>
            Email List of Accounts to User
            </summary>
            <remarks>
            Sends the list of accounts to the specified email address
            This operation does not require authentication
            </remarks>
            <param name="email"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.GetLoginAccessControlDomains">
            <summary>
            Get the Login Access Control List of domains
            </summary>
            <remarks>
            Retrieve the list of domains that are allowed or disallowed to login.
            Whether the list is an allow or disallow list
            is configured by the AccessControlType property. The domain names are checked against the domains of all the
            email addresses of the user that attempts to log in to the Account.
            </remarks>
            <returns>
            The Login Access Control List of domains for the Account.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.GetFolderAccessControlDomains">
            <summary>
            Get the Folder Access Control List of domains
            </summary>
            <remarks>
            Retrieve the list of domains that are allowed or disallowed to have access to folders. Whether the list is an allow or disallow list
            is configured by the AccessControlType property.
            
            The list blocks user access to folders by preventing adding a user to distribution groups or folders.
            The domain names are checked against the domains of all the email addresses of the user.
            This is an account-wide setting.
            </remarks>
            <returns>
            The Folder Access Control List of domains for the Account, e.g.
            
            {
            "AccessControlType" : "AllowedDomains",
            "Domains": ["domainA", "domainB", ...]
            }
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.CreateLoginAccessControlDomains(ShareFile.Api.Models.AccessControlDomains)">
            <summary>
            Create or replace the Login Access Control List of domains
            </summary>
            <example>
            {
            "AccessControlType" : "AllowedDomains",
            "Domains": ["domainA", "domainB", ...]
            }
            </example>
            <param name="AccessControlType"></param>
            <param name="Domains"></param>
            <returns>
            The new Login Access Control List of domains for the Account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.CreateFolderAccessControlDomains(ShareFile.Api.Models.AccessControlDomains)">
            <summary>
            Create or replace the Folder Access Control List of domains
            </summary>
            <example>
            {
            "AccessControlType" : "AllowedDomains",
            "Domains": ["domainA", "domainB", ...]
            }
            </example>
            <param name="AccessControlType"></param>
            <param name="Domains"></param>
            <returns>
            The new Folder Access Control List of domains for the Account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.UpdateLoginAccessControlDomains(ShareFile.Api.Models.AccessControlDomains)">
            <summary>
            Update the Login Access Control List of domains
            </summary>
            <example>
            {
            "AccessControlType" : "AllowedDomains",
            "Domains": ["domainA", "domainB", ...]
            }
            </example>
            <remarks>
            Merges the specified domains with existing domains in the list, and/or updates the AccessControlType. One of the parameters needs to be specified.
            </remarks>
            <param name="AccessControlType"></param>
            <param name="Domains"></param>
            <returns>
            The updated Login Access Control List of domains for the Account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.UpdateFolderAccessControlDomains(ShareFile.Api.Models.AccessControlDomains)">
            <summary>
            Update the Folder Access Control List of domains
            </summary>
            <example>
            {
            "AccessControlType" : "AllowedDomains",
            "Domains": ["domainA", "domainB", ...]
            }
            </example>
            <remarks>
            Merges the specified domains with existing domains in the list, and/or updates the AccessControlType. One of the parameters needs to be specified. It
            allows to add new domains to the list.
            </remarks>
            <param name="AccessControlType"></param>
            <param name="Domains"></param>
            <returns>
            The updated Folder Access Control List of domains for the Account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.DeleteLoginAccessControlDomains(ShareFile.Api.Models.AccessControlDomains)">
            <summary>
            Delete domains from the Logins Access Control List of domains
            </summary>
            <example>
            {
            "AccessControlType" : "AllowedDomains",
            "Domains": ["domainA", "domainB", ...]
            }
            </example>
            <remarks>
            Deletes the specified domains from the list.
            </remarks>
            <param name="AccessControlType"></param>
            <param name="Domains"></param>
            <returns>
            No content
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.DeleteFolderAccessControlDomains(ShareFile.Api.Models.AccessControlDomains)">
            <summary>
            Delete domains from the Folder Access Control List of domains
            </summary>
            <example>
            {
            "AccessControlType" : "AllowedDomains",
            "Domains": ["domainA", "domainB", ...]
            }
            </example>
            <remarks>
            Deletes the specified domains from the list.
            </remarks>
            <param name="AccessControlType"></param>
            <param name="Domains"></param>
            <returns>
            No content
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.RequireWebPop(System.String,System.String,System.Boolean)">
            <summary>
            Check if WebPop is required
            </summary>
            <param name="subdomain"></param>
            <param name="username"></param>
            <param name="singlePlane"></param>
            <returns>
            RequireWebPopResult
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.RequireSubdomain(System.String,System.Boolean)">
            <summary>
            Check if subdomain is required
            </summary>
            <param name="username"></param>
            <param name="singlePlane"></param>
            <returns>
            RequireSubdomainResult
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.FindSubdomain(ShareFile.Api.Models.FindSubdomainParams,System.Boolean)">
            <summary>
            Find Subdomain
            </summary>
            <example>
            {
            "UsernameShort":"usernameShort",
            "Password":"pass",
            "EmployeeOnly":false
            }
            </example>
            <remarks>
            Find the user account information based on the short username
            </remarks>
            <param name="findSubdomainParams"></param>
            <param name="singlePlane"></param>
            <returns>
            FindSubdomainResult
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.GetOutlookInformation">
            <summary>
            Get Outlook Information
            </summary>
            <returns>
            OutlookInformation
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.GetSSOInfo(System.String)">
            <summary>
            Get SSO Info
            </summary>
            <param name="subdomain"></param>
            <returns>
            SSOInfo
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.GetTenants">
            <summary>
            Get the tenants of a partner account
            </summary>
            <returns>
            List of tenant accounts managed by this partner account, if any
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.GetZones(System.String)">
            <summary>
            Get list of multi-tenant zones assigned to a tenant.
            </summary>
            <param name="parentid"></param>
            <returns>
            List of multi-tenant zones assigned to the tenant
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAsyncOperationsEntity.Get(System.Uri)">
            <summary>
            Get AsyncOperation by ID
            </summary>
            <remarks>
            Retrieve a single Async Op record by ID
            </remarks>
            <param name="url"></param>
            <returns>
            A single Async Operation record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAsyncOperationsEntity.GetByBatch(System.String)">
            <summary>
            Get List of AsyncOperations by Operation Batch ID
            </summary>
            <remarks>
            Retrieves all AsyncOperations on the specified batch
            </remarks>
            <param name="id"></param>
            <returns>
            A Feed of AsyncOperation objects, containing all items in the specified batch
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAsyncOperationsEntity.GetBatch(System.String)">
            <summary>
            Get the progress of the AsyncOperations by Opertaion Batch ID
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAsyncOperationsEntity.GetByFolder(System.String)">
            <summary>
            Get List of AsyncOperations by Folder
            </summary>
            <remarks>
            Retrieves all AsyncOperations associated with the calling user and the Item ID
            </remarks>
            <param name="id"></param>
            <returns>
            A Feed of AsyncOperation objects, containing all pending operations in the specific folder,
            for the authenticated SDK user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAsyncOperationsEntity.Cancel(System.Uri)">
            <summary>
            Cancel AsyncOperation
            </summary>
            <remarks>
            Cancels a single Async operation record
            </remarks>
            <param name="url"></param>
            <returns>
            The modified Async Operation record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAsyncOperationsEntity.Delete(System.Uri)">
            <summary>
            Delete AsyncOperation
            </summary>
            <remarks>
            Cancels a single Async operation record (same as /Cancel)
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAsyncOperationsEntity.CancelBatch(System.String)">
            <summary>
            Cancel an Operation Batch
            </summary>
            <remarks>
            Cancel an Async Operation batch - all unfinished Async Operation records in that batch
            will be moved to Cancelled state.
            </remarks>
            <param name="id"></param>
            <returns>
            A list of the modified Async Operations in the batch
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAsyncOperationsEntity.Update(System.Uri,ShareFile.Api.Models.AsyncOperation)">
            <summary>
            Changes the state of an AsyncOperation
            </summary>
            <example>
            { "State": "..." }
            </example>
            <remarks>
            Only the State parameter is updated, other fields are ignored
            </remarks>
            <param name="url"></param>
            <param name="newAsyncOp"></param>
            <returns>
            The modified Async Operation
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AsyncOperationsEntity.Get(System.Uri)">
            <summary>
            Get AsyncOperation by ID
            </summary>
            <remarks>
            Retrieve a single Async Op record by ID
            </remarks>
            <param name="url"></param>
            <returns>
            A single Async Operation record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AsyncOperationsEntity.GetByBatch(System.String)">
            <summary>
            Get List of AsyncOperations by Operation Batch ID
            </summary>
            <remarks>
            Retrieves all AsyncOperations on the specified batch
            </remarks>
            <param name="id"></param>
            <returns>
            A Feed of AsyncOperation objects, containing all items in the specified batch
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AsyncOperationsEntity.GetBatch(System.String)">
            <summary>
            Get the progress of the AsyncOperations by Opertaion Batch ID
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AsyncOperationsEntity.GetByFolder(System.String)">
            <summary>
            Get List of AsyncOperations by Folder
            </summary>
            <remarks>
            Retrieves all AsyncOperations associated with the calling user and the Item ID
            </remarks>
            <param name="id"></param>
            <returns>
            A Feed of AsyncOperation objects, containing all pending operations in the specific folder,
            for the authenticated SDK user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AsyncOperationsEntity.Cancel(System.Uri)">
            <summary>
            Cancel AsyncOperation
            </summary>
            <remarks>
            Cancels a single Async operation record
            </remarks>
            <param name="url"></param>
            <returns>
            The modified Async Operation record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AsyncOperationsEntity.Delete(System.Uri)">
            <summary>
            Delete AsyncOperation
            </summary>
            <remarks>
            Cancels a single Async operation record (same as /Cancel)
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AsyncOperationsEntity.CancelBatch(System.String)">
            <summary>
            Cancel an Operation Batch
            </summary>
            <remarks>
            Cancel an Async Operation batch - all unfinished Async Operation records in that batch
            will be moved to Cancelled state.
            </remarks>
            <param name="id"></param>
            <returns>
            A list of the modified Async Operations in the batch
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AsyncOperationsEntity.Update(System.Uri,ShareFile.Api.Models.AsyncOperation)">
            <summary>
            Changes the state of an AsyncOperation
            </summary>
            <example>
            { "State": "..." }
            </example>
            <remarks>
            Only the State parameter is updated, other fields are ignored
            </remarks>
            <param name="url"></param>
            <param name="newAsyncOp"></param>
            <returns>
            The modified Async Operation
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ICapabilitiesEntity.Get">
            <summary>
            Get List of Capabilities
            </summary>
            <remarks>
            Retrieves the capability list of a given provider.
            The URL for ShareFile API is of the form Domain/Provider/Version/EntityThe Domain is the server presenting the provider - typically sharefile.com,
            but can be any other when using Storage Zones. The Provider represent the kind of data storage connected by the API. Examples
            are 'sf' for ShareFile; 'cifs' for CIFS; and 'sp' for SharePoint. Other providers
            may be created, clients must not assume any particular string.Version specifies the API version - currently at V3. Any backward incompatible
            changes will be performed on a different version identifier, to avoid breaking
            existing clients.The Capability document is used to indicate to clients that certain features
            are not available on a given provider - allowing the client to suppress UX controls
            and avoid "Not Implemented" exceptions to the end-user.
            </remarks>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.CapabilitiesEntity.Get">
            <summary>
            Get List of Capabilities
            </summary>
            <remarks>
            Retrieves the capability list of a given provider.
            The URL for ShareFile API is of the form Domain/Provider/Version/EntityThe Domain is the server presenting the provider - typically sharefile.com,
            but can be any other when using Storage Zones. The Provider represent the kind of data storage connected by the API. Examples
            are 'sf' for ShareFile; 'cifs' for CIFS; and 'sp' for SharePoint. Other providers
            may be created, clients must not assume any particular string.Version specifies the API version - currently at V3. Any backward incompatible
            changes will be performed on a different version identifier, to avoid breaking
            existing clients.The Capability document is used to indicate to clients that certain features
            are not available on a given provider - allowing the client to suppress UX controls
            and avoid "Not Implemented" exceptions to the end-user.
            </remarks>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IConnectorGroupsEntity.Get(System.Uri)">
            <summary>
            Get all Connector Groups in the account
            </summary>
            <remarks>
            Retrieves a Connector Group
            </remarks>
            <param name="serviceid"></param>
            <returns>
            A single ConnectorGroup object matching the query
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IConnectorGroupsEntity.ByProvider(System.String)">
            <summary>
            Get the Connector Group by Provider
            </summary>
            <param name="provider"></param>
            <returns>
            A single ConnectorGroup matching the query
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IConnectorGroupsEntity.GetZones(System.Uri,System.String)">
            <summary>
            Get the Connector Group by Service ID
            </summary>
            <remarks>
            Retrieves a Connector Group
            </remarks>
            <param name="id"></param>
            <returns>
            A single ConnectorGroup object matching the query
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IConnectorGroupsEntity.GetAccessControls(System.Uri,System.String)">
            <summary>
            Get an Access Control element
            </summary>
            <remarks>
            Retrieves a Connector Group Access Control of a given user
            </remarks>
            <param name="parentUrl"></param>
            <param name="id"></param>
            <returns>
            A single ConnectorGroup ACL object matching the query
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IConnectorGroupsEntity.GetByZone(System.String)">
            <summary>
            Get Connector Groups in a Zone
            </summary>
            <remarks>
            Retrieves the Connector Groups defined in a Zone.
            </remarks>
            <param name="zoneid"></param>
            <returns>
            Access Control List of the given object ID.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IConnectorGroupsEntity.Create(ShareFile.Api.Models.ConnectorGroup)">
            <summary>
            Create a Connector Group associated with a Zone
            </summary>
            <example>
            {
            "Zones":[
            "Zone": {"Id":"ZoneId"},
            "StorageCenter": [ { "Id":"StorageCenterId" }, { ... } ],
            "ApiVersionMin":"v3",
            "ApiVersionMax":"v3",
            "IconUrl":"https://domain/icons",
            "FormUrl":"https://domain/forms"
            ],
            "Id":"ServiceId",
            "Name":""Name,
            "Provider":"svc"
            }
            </example>
            <remarks>
            Creates a new Connector Group, or adds a Zone to an existing Connector Group if the Group is already associated
            with another Zone. The caller doesn't have to check if the group exists or not - just call this API passing
            the Service ID and the associated Zone information.
            </remarks>
            <param name="id"></param>
            <param name="connectorGroup"></param>
            <returns>
            the created or modified AccessControl instance
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IConnectorGroupsEntity.CreateZones(System.Uri,ShareFile.Api.Models.ConnectorGroupZone)">
            <summary>
            Associates a Zone to an existing Connecto Group
            </summary>
            <example>
            {
            "Zone": {"Id":"ZoneId"},
            "StorageCenter": [ { "Id":"StorageCenterId" }, { ... } ],
            "ApiVersionMin":"v3",
            "ApiVersionMax":"v3",
            "IconUrl":"https://domain/icons",
            "FormUrl":"https://domain/forms"
            }
            </example>
            <remarks>
            Adds a Zone to an existing Connector Group.
            </remarks>
            <param name="url"></param>
            <param name="connectorGroupZone"></param>
            <returns>
            the created or modified AccessControl instance
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IConnectorGroupsEntity.CreateAccessControls(System.Uri,ShareFile.Api.Models.ConnectorGroupAccessControl)">
            <summary>
            Adds a new principal to the Connector Group Access Control List
            </summary>
            <example>
            {
            "Principal": {"Id":"PrincipalId"},
            "CanCreate":"true",
            "CanManage":"true"
            }
            </example>
            <param name="url"></param>
            <param name="connectorGroupAcl"></param>
            <returns>
            The created access control list object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IConnectorGroupsEntity.UpdateZones(System.Uri,System.String,ShareFile.Api.Models.ConnectorGroupZone)">
            <summary>
            Modifies the parameters of a Connector Group in associated with a Zone
            </summary>
            <example>
            {
            "Zone": {"Id":"ZoneId"},
            "ApiVersionMin":"v3",
            "ApiVersionMax":"v3",
            "IconUrl":"https://domain/icons",
            "FormUrl":"https://domain/forms"
            }
            </example>
            <param name="url"></param>
            <param name="zoneId"></param>
            <param name="connectorGroupZone"></param>
            <returns>
            the created or modified AccessControl instance
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IConnectorGroupsEntity.Delete(System.Uri)">
            <summary>
            Removes a Connector Group
            </summary>
            <remarks>
            Removes a Connector Group and all associations from Zones
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IConnectorGroupsEntity.DeleteZones(System.Uri,System.String)">
            <summary>
            Removes a Connector Group association with a Zone
            </summary>
            <remarks>
            Removes a Connector Group association with a Zone. Connector Groups are automatically removed
            once the groups is removed from all the Zones.
            </remarks>
            <param name="serviceUrl"></param>
            <param name="zoneid"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IConnectorGroupsEntity.DeleteAccessControls(System.Uri,System.String)">
            <summary>
            Removes a Connector Group Access Control object
            </summary>
            <remarks>
            Removes an Access Control object from the Connector Group ACL. This removes the permissions of
            the affected principal to use the Connector Group.
            </remarks>
            <param name="serviceUrl"></param>
            <param name="zoneid"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IConnectorGroupsEntity.GetStorageCenters(System.Uri,System.String)">
            <summary>
            Retrieve the list of Storage Centers associated with a Connector Group
            </summary>
            <remarks>
            Retrieve the list of storage centers associated with a Connector Group.
            </remarks>
            <param name="url"></param>
            <param name="zoneid"></param>
            <returns>
            The modified Connector Group
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IConnectorGroupsEntity.CreateStorageCenters(System.Uri,System.String,ShareFile.Api.Models.StorageCenter)">
            <summary>
            Adds a Connector Group to a Storage Center
            </summary>
            <example>
            {
            "Id":"storageCenterId"
            }
            </example>
            <remarks>
            Associate a Connector Group with a Storage Center. The Connector Group has to be
            associated with the Storage Center Zone.
            </remarks>
            <param name="url"></param>
            <param name="zoneid"></param>
            <returns>
            The modified Connector Group
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ConnectorGroupsEntity.Get(System.Uri)">
            <summary>
            Get all Connector Groups in the account
            </summary>
            <remarks>
            Retrieves a Connector Group
            </remarks>
            <param name="serviceid"></param>
            <returns>
            A single ConnectorGroup object matching the query
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ConnectorGroupsEntity.ByProvider(System.String)">
            <summary>
            Get the Connector Group by Provider
            </summary>
            <param name="provider"></param>
            <returns>
            A single ConnectorGroup matching the query
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ConnectorGroupsEntity.GetZones(System.Uri,System.String)">
            <summary>
            Get the Connector Group by Service ID
            </summary>
            <remarks>
            Retrieves a Connector Group
            </remarks>
            <param name="id"></param>
            <returns>
            A single ConnectorGroup object matching the query
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ConnectorGroupsEntity.GetAccessControls(System.Uri,System.String)">
            <summary>
            Get an Access Control element
            </summary>
            <remarks>
            Retrieves a Connector Group Access Control of a given user
            </remarks>
            <param name="parentUrl"></param>
            <param name="id"></param>
            <returns>
            A single ConnectorGroup ACL object matching the query
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ConnectorGroupsEntity.GetByZone(System.String)">
            <summary>
            Get Connector Groups in a Zone
            </summary>
            <remarks>
            Retrieves the Connector Groups defined in a Zone.
            </remarks>
            <param name="zoneid"></param>
            <returns>
            Access Control List of the given object ID.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ConnectorGroupsEntity.Create(ShareFile.Api.Models.ConnectorGroup)">
            <summary>
            Create a Connector Group associated with a Zone
            </summary>
            <example>
            {
            "Zones":[
            "Zone": {"Id":"ZoneId"},
            "StorageCenter": [ { "Id":"StorageCenterId" }, { ... } ],
            "ApiVersionMin":"v3",
            "ApiVersionMax":"v3",
            "IconUrl":"https://domain/icons",
            "FormUrl":"https://domain/forms"
            ],
            "Id":"ServiceId",
            "Name":""Name,
            "Provider":"svc"
            }
            </example>
            <remarks>
            Creates a new Connector Group, or adds a Zone to an existing Connector Group if the Group is already associated
            with another Zone. The caller doesn't have to check if the group exists or not - just call this API passing
            the Service ID and the associated Zone information.
            </remarks>
            <param name="id"></param>
            <param name="connectorGroup"></param>
            <returns>
            the created or modified AccessControl instance
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ConnectorGroupsEntity.CreateZones(System.Uri,ShareFile.Api.Models.ConnectorGroupZone)">
            <summary>
            Associates a Zone to an existing Connecto Group
            </summary>
            <example>
            {
            "Zone": {"Id":"ZoneId"},
            "StorageCenter": [ { "Id":"StorageCenterId" }, { ... } ],
            "ApiVersionMin":"v3",
            "ApiVersionMax":"v3",
            "IconUrl":"https://domain/icons",
            "FormUrl":"https://domain/forms"
            }
            </example>
            <remarks>
            Adds a Zone to an existing Connector Group.
            </remarks>
            <param name="url"></param>
            <param name="connectorGroupZone"></param>
            <returns>
            the created or modified AccessControl instance
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ConnectorGroupsEntity.CreateAccessControls(System.Uri,ShareFile.Api.Models.ConnectorGroupAccessControl)">
            <summary>
            Adds a new principal to the Connector Group Access Control List
            </summary>
            <example>
            {
            "Principal": {"Id":"PrincipalId"},
            "CanCreate":"true",
            "CanManage":"true"
            }
            </example>
            <param name="url"></param>
            <param name="connectorGroupAcl"></param>
            <returns>
            The created access control list object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ConnectorGroupsEntity.UpdateZones(System.Uri,System.String,ShareFile.Api.Models.ConnectorGroupZone)">
            <summary>
            Modifies the parameters of a Connector Group in associated with a Zone
            </summary>
            <example>
            {
            "Zone": {"Id":"ZoneId"},
            "ApiVersionMin":"v3",
            "ApiVersionMax":"v3",
            "IconUrl":"https://domain/icons",
            "FormUrl":"https://domain/forms"
            }
            </example>
            <param name="url"></param>
            <param name="zoneId"></param>
            <param name="connectorGroupZone"></param>
            <returns>
            the created or modified AccessControl instance
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ConnectorGroupsEntity.Delete(System.Uri)">
            <summary>
            Removes a Connector Group
            </summary>
            <remarks>
            Removes a Connector Group and all associations from Zones
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ConnectorGroupsEntity.DeleteZones(System.Uri,System.String)">
            <summary>
            Removes a Connector Group association with a Zone
            </summary>
            <remarks>
            Removes a Connector Group association with a Zone. Connector Groups are automatically removed
            once the groups is removed from all the Zones.
            </remarks>
            <param name="serviceUrl"></param>
            <param name="zoneid"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ConnectorGroupsEntity.DeleteAccessControls(System.Uri,System.String)">
            <summary>
            Removes a Connector Group Access Control object
            </summary>
            <remarks>
            Removes an Access Control object from the Connector Group ACL. This removes the permissions of
            the affected principal to use the Connector Group.
            </remarks>
            <param name="serviceUrl"></param>
            <param name="zoneid"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ConnectorGroupsEntity.GetStorageCenters(System.Uri,System.String)">
            <summary>
            Retrieve the list of Storage Centers associated with a Connector Group
            </summary>
            <remarks>
            Retrieve the list of storage centers associated with a Connector Group.
            </remarks>
            <param name="url"></param>
            <param name="zoneid"></param>
            <returns>
            The modified Connector Group
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ConnectorGroupsEntity.CreateStorageCenters(System.Uri,System.String,ShareFile.Api.Models.StorageCenter)">
            <summary>
            Adds a Connector Group to a Storage Center
            </summary>
            <example>
            {
            "Id":"storageCenterId"
            }
            </example>
            <remarks>
            Associate a Connector Group with a Storage Center. The Connector Group has to be
            associated with the Storage Center Zone.
            </remarks>
            <param name="url"></param>
            <param name="zoneid"></param>
            <returns>
            The modified Connector Group
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFavoriteFoldersEntity.GetByUser(System.Uri)">
            <summary>
            Get List of FavoriteFolders
            </summary>
            <remarks>
            Retrieves the list of Favorite folders for a given user.
            </remarks>
            <param name="url"></param>
            <returns>
            A list of Favorite Folders specified by this user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFavoriteFoldersEntity.GetByUser(System.Uri,System.String)">
            <summary>
            Get FavoriteFolder
            </summary>
            <remarks>
            Retrieves a single Favorite Folder
            </remarks>
            <param name="userid"></param>
            <param name="itemUrl"></param>
            <returns>
            A list of Favorite Folders specified by this user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFavoriteFoldersEntity.GetFavoriteFolderByItem(System.Uri)">
            <summary>
            Get Item as Favorite Folder
            </summary>
            <remarks>
            Retrieves a Favorite Folder representation of a given parent Item
            </remarks>
            <param name="parentUrl"></param>
            <returns>
            The specified Favorite Folder if it belongs to the specified parent Item
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFavoriteFoldersEntity.Get(System.Uri)">
            <summary>
            Get FavoriteFolder
            </summary>
            <remarks>
            Retrieve a single Favorite Folder from a give user
            </remarks>
            <returns>
            The selected Favorite Folder
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFavoriteFoldersEntity.CreateByUser(System.Uri,ShareFile.Api.Models.FavoriteFolder)">
            <summary>
            Create FavoriteFolder
            </summary>
            <example>
            {
            "Folder": { "Id":"fo96aec5-d637-4124-bcc9-c86fd7301e4d" },
            "FolderAlias" : "alias"
            }
            </example>
            <remarks>
            Adds an existing folder to the list of favorites of a given user.
            </remarks>
            <param name="url"></param>
            <param name="folder"></param>
            <returns>
            A new FavoriteFolder record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFavoriteFoldersEntity.Delete(System.Uri,System.String)">
            <summary>
            Delete FavoriteFolder
            </summary>
            <remarks>
            Removes a favorite folder from a user's list.
            </remarks>
            <param name="url"></param>
            <param name="itemid"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FavoriteFoldersEntity.GetByUser(System.Uri)">
            <summary>
            Get List of FavoriteFolders
            </summary>
            <remarks>
            Retrieves the list of Favorite folders for a given user.
            </remarks>
            <param name="url"></param>
            <returns>
            A list of Favorite Folders specified by this user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FavoriteFoldersEntity.GetByUser(System.Uri,System.String)">
            <summary>
            Get FavoriteFolder
            </summary>
            <remarks>
            Retrieves a single Favorite Folder
            </remarks>
            <param name="userid"></param>
            <param name="itemUrl"></param>
            <returns>
            A list of Favorite Folders specified by this user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FavoriteFoldersEntity.GetFavoriteFolderByItem(System.Uri)">
            <summary>
            Get Item as Favorite Folder
            </summary>
            <remarks>
            Retrieves a Favorite Folder representation of a given parent Item
            </remarks>
            <param name="parentUrl"></param>
            <returns>
            The specified Favorite Folder if it belongs to the specified parent Item
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FavoriteFoldersEntity.Get(System.Uri)">
            <summary>
            Get FavoriteFolder
            </summary>
            <remarks>
            Retrieve a single Favorite Folder from a give user
            </remarks>
            <returns>
            The selected Favorite Folder
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FavoriteFoldersEntity.CreateByUser(System.Uri,ShareFile.Api.Models.FavoriteFolder)">
            <summary>
            Create FavoriteFolder
            </summary>
            <example>
            {
            "Folder": { "Id":"fo96aec5-d637-4124-bcc9-c86fd7301e4d" },
            "FolderAlias" : "alias"
            }
            </example>
            <remarks>
            Adds an existing folder to the list of favorites of a given user.
            </remarks>
            <param name="url"></param>
            <param name="folder"></param>
            <returns>
            A new FavoriteFolder record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FavoriteFoldersEntity.Delete(System.Uri,System.String)">
            <summary>
            Delete FavoriteFolder
            </summary>
            <remarks>
            Removes a favorite folder from a user's list.
            </remarks>
            <param name="url"></param>
            <param name="itemid"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFolderTemplatesEntity.Get">
            <summary>
            Get Folder Templates for Current Account
            </summary>
            <remarks>
            Returns all folder templates for the current account.
            </remarks>
            <returns>
            Folder templates for current account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFolderTemplatesEntity.Create(ShareFile.Api.Models.FolderTemplate)">
            <summary>
            Create Folder Template
            </summary>
            <example>
            {
            "Name": "Client Folder",
            "Description": "For all client folders created in 2014 or after"
            "Items": [
            {
            "Name": "Folder 1",
            "Items": [
            {
            "Name": "Subfolder1"
            }
            ]
            },
            {
            "Name": "Folder 2"
            }
            ]
            </example>
            <remarks>
            Creates a new folder template.
            </remarks>
            <returns>
            The created folder template
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFolderTemplatesEntity.Update(ShareFile.Api.Models.FolderTemplate)">
            <summary>
            Update Folder Template
            </summary>
            <example>
            {
            "Name": "Client Folder",
            "Description": "For all client folders created in 2014 or after",
            "Items": [
            {
            "Name": "A new folder",
            "Items": [
            {
            "TemplateId": "ft-12345-abdef-abdef-12345-abdef",
            "Name": "A new subfolder"
            }
            ]
            },
            {
            "Id": "fti-xxxxx-xxxxx-xxxxx-xxxxx",
            "Name": "An existing folder with a different name"
            }
            ]
            }
            </example>
            <remarks>
            Updates an existing folder template
            </remarks>
            <returns>
            The updated folder template
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFolderTemplatesEntity.Delete(System.Uri)">
            <summary>
            Delete Folder Template
            </summary>
            <remarks>
            Removes a folder template
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FolderTemplatesEntity.Get">
            <summary>
            Get Folder Templates for Current Account
            </summary>
            <remarks>
            Returns all folder templates for the current account.
            </remarks>
            <returns>
            Folder templates for current account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FolderTemplatesEntity.Create(ShareFile.Api.Models.FolderTemplate)">
            <summary>
            Create Folder Template
            </summary>
            <example>
            {
            "Name": "Client Folder",
            "Description": "For all client folders created in 2014 or after"
            "Items": [
            {
            "Name": "Folder 1",
            "Items": [
            {
            "Name": "Subfolder1"
            }
            ]
            },
            {
            "Name": "Folder 2"
            }
            ]
            </example>
            <remarks>
            Creates a new folder template.
            </remarks>
            <returns>
            The created folder template
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FolderTemplatesEntity.Update(ShareFile.Api.Models.FolderTemplate)">
            <summary>
            Update Folder Template
            </summary>
            <example>
            {
            "Name": "Client Folder",
            "Description": "For all client folders created in 2014 or after",
            "Items": [
            {
            "Name": "A new folder",
            "Items": [
            {
            "TemplateId": "ft-12345-abdef-abdef-12345-abdef",
            "Name": "A new subfolder"
            }
            ]
            },
            {
            "Id": "fti-xxxxx-xxxxx-xxxxx-xxxxx",
            "Name": "An existing folder with a different name"
            }
            ]
            }
            </example>
            <remarks>
            Updates an existing folder template
            </remarks>
            <returns>
            The updated folder template
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FolderTemplatesEntity.Delete(System.Uri)">
            <summary>
            Delete Folder Template
            </summary>
            <remarks>
            Removes a folder template
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IGroupsEntity.Get">
            <summary>
            Get Group List
            </summary>
            <remarks>
            Retrieves all Distribution Groups this user has permissions to View in this account
            </remarks>
            <returns>
            a list of Groups this user has access to
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IGroupsEntity.Get(System.Uri)">
            <summary>
            Get Group By ID
            </summary>
            <remarks>
            Retrives a single Group by id
            </remarks>
            <param name="url"></param>
            <returns>
            A single Group object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IGroupsEntity.Delete(System.Uri)">
            <summary>
            Delete Group
            </summary>
            <remarks>
            Removes a single Group by id
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IGroupsEntity.Create(ShareFile.Api.Models.Group)">
            <summary>
            Create Group
            </summary>
            <example>
            {
            "Name":"Name",
            "IsShared":true,
            "Contacts":[{"Email":"user.one@domain.com"},{"Email":"user.two@domain.com"}]
            }
            </example>
            <remarks>
            Creates a new group. The Post body must include the specification of the group.
            </remarks>
            <param name="group"></param>
            <returns>
            the new group instance
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IGroupsEntity.Update(System.Uri,ShareFile.Api.Models.Group)">
            <summary>
            Update Group
            </summary>
            <example>
            {
            "Name":"Name",
            "IsShared":true,
            }
            </example>
            <remarks>
            Updates an existing group.
            This operation will ignore the provided clients list. Use the \Contacts navigation link to
            add/remove elements from a group
            </remarks>
            <param name="url"></param>
            <param name="group"></param>
            <returns>
            the modified group object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IGroupsEntity.GetContacts(System.Uri)">
            <summary>
            Get Group Contacts
            </summary>
            <remarks>
            Retrieves the Contacts navigation property of a Group
            </remarks>
            <param name="url"></param>
            <returns>
            A feed of Contacts representing the members of the Group
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IGroupsEntity.CreateContacts(System.Uri,System.Collections.Generic.IEnumerable{ShareFile.Api.Models.Contact})">
            <summary>
            Add Contacts to Group
            </summary>
            <example>
            [{"Email":"user.one@domain.com"},{"Id":"abcd"}]
            </example>
            <remarks>
            Adds a list of contacts to a group
            The contact list may contain either contact ID (same as User ID) or Email.
            </remarks>
            <param name="url"></param>
            <param name="contacts"></param>
            <returns>
            The updated list of contacts for this group
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IGroupsEntity.DeleteContacts(System.Uri,System.Collections.Generic.IEnumerable{ShareFile.Api.Models.Contact})">
            <summary>
            Remove Contacts from Group
            </summary>
            <example>
            [{"Email":"user.one@domain.com"},{"Id":"abcd"}]
            </example>
            <remarks>
            Removes contacts from a group
            The contact list may contain either contact ID (same as User ID) or Email.
            This method will ignore missing references in the provided list - i.e., if an email in the contacts
            list is not present in the group, it will be ignored.
            The method will not enforce that ID and Email match inside a single Contact instance: Id will be
            looked up first, then Email.
            </remarks>
            <param name="url"></param>
            <param name="contacts"></param>
            <returns>
            The updated list of contacts for this group
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.GroupsEntity.Get">
            <summary>
            Get Group List
            </summary>
            <remarks>
            Retrieves all Distribution Groups this user has permissions to View in this account
            </remarks>
            <returns>
            a list of Groups this user has access to
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.GroupsEntity.Get(System.Uri)">
            <summary>
            Get Group By ID
            </summary>
            <remarks>
            Retrives a single Group by id
            </remarks>
            <param name="url"></param>
            <returns>
            A single Group object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.GroupsEntity.Delete(System.Uri)">
            <summary>
            Delete Group
            </summary>
            <remarks>
            Removes a single Group by id
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.GroupsEntity.Create(ShareFile.Api.Models.Group)">
            <summary>
            Create Group
            </summary>
            <example>
            {
            "Name":"Name",
            "IsShared":true,
            "Contacts":[{"Email":"user.one@domain.com"},{"Email":"user.two@domain.com"}]
            }
            </example>
            <remarks>
            Creates a new group. The Post body must include the specification of the group.
            </remarks>
            <param name="group"></param>
            <returns>
            the new group instance
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.GroupsEntity.Update(System.Uri,ShareFile.Api.Models.Group)">
            <summary>
            Update Group
            </summary>
            <example>
            {
            "Name":"Name",
            "IsShared":true,
            }
            </example>
            <remarks>
            Updates an existing group.
            This operation will ignore the provided clients list. Use the \Contacts navigation link to
            add/remove elements from a group
            </remarks>
            <param name="url"></param>
            <param name="group"></param>
            <returns>
            the modified group object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.GroupsEntity.GetContacts(System.Uri)">
            <summary>
            Get Group Contacts
            </summary>
            <remarks>
            Retrieves the Contacts navigation property of a Group
            </remarks>
            <param name="url"></param>
            <returns>
            A feed of Contacts representing the members of the Group
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.GroupsEntity.CreateContacts(System.Uri,System.Collections.Generic.IEnumerable{ShareFile.Api.Models.Contact})">
            <summary>
            Add Contacts to Group
            </summary>
            <example>
            [{"Email":"user.one@domain.com"},{"Id":"abcd"}]
            </example>
            <remarks>
            Adds a list of contacts to a group
            The contact list may contain either contact ID (same as User ID) or Email.
            </remarks>
            <param name="url"></param>
            <param name="contacts"></param>
            <returns>
            The updated list of contacts for this group
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.GroupsEntity.DeleteContacts(System.Uri,System.Collections.Generic.IEnumerable{ShareFile.Api.Models.Contact})">
            <summary>
            Remove Contacts from Group
            </summary>
            <example>
            [{"Email":"user.one@domain.com"},{"Id":"abcd"}]
            </example>
            <remarks>
            Removes contacts from a group
            The contact list may contain either contact ID (same as User ID) or Email.
            This method will ignore missing references in the provided list - i.e., if an email in the contacts
            list is not present in the group, it will be ignored.
            The method will not enforce that ID and Email match inside a single Contact instance: Id will be
            looked up first, then Email.
            </remarks>
            <param name="url"></param>
            <param name="contacts"></param>
            <returns>
            The updated list of contacts for this group
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ShareFile.Api.Client.Entities.IItemsEntity.Get" -->
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.Get(System.Uri,System.Boolean)">
            <summary>
            Get Item by ID
            </summary>
            <remarks>
            Returns a single Item.
            Special Id's:home, favorites, allshared, connectors, box, top. home - Return home folder.
            favorites - Return parent favorite item; use .../Items(favorites)/Children to get the favorite folders.
            allshared - Return parent Shared Folders item; use .../Items(allshared)/Children to get the shared folders.
            connectors - Return parent Connectors item; use .../Items(connectors)/Children to get indiviual connectors.
            box - Return the FileBox folder. top - Returns the Top item; use .../Items(top)/Children to get the home, favorites, and shared folders as well as the connectors
            </remarks>
            <param name="url"></param>
            <param name="includeDeleted"></param>
            <returns>
            a single Item
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.Get(System.Uri,ShareFile.Api.Models.TreeMode,System.String,System.Boolean,System.Boolean)">
            <summary>
            Get TreeView
            </summary>
            <remarks>
            Retrieves a folder list structure tailored for TreeView navigation - used by clients
            to create folder trees for specific operations.
            This operation will enforce a specific $select and $expand operators. You can provide
            additional $expand, for example Children, which is not added by default. The $select
            operator will apply to the expanded objects as well. You can also specify additional
            $select elements.
            </remarks>
            <param name="url"></param>
            <param name="treeMode"></param>
            <param name="sourceId"></param>
            <param name="canCreateRootFolder"></param>
            <param name="fileBox"></param>
            <returns>
            A tree root element.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.GetChildrenByConnectorGroup(System.Uri)">
            <summary>
            Get Symbolic Links of a Connector Group
            </summary>
            <remarks>
            Retrieves the Symbolic Links of the provided Connector Group type. Connector Groups define
            classes of external data connectors - such as SharePoint, Network Shares. Symbolic Links
            represent a single Connector point to such classes - for example, a single SharePoint site,
            or a network share drive.
            </remarks>
            <param name="parentUrl"></param>
            <returns>
            The list of Symbolic Links associated with the given connector group.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.Stream(System.Uri,System.Boolean)">
            <summary>
            Get Stream
            </summary>
            <remarks>
            Retrieves the versions of a given Stream. The ID parameter must be a StreamID, otherwise an empty list is returned.
            StreamID is a property of all Items, representing the "Stream", ie., the collection of all versions of a file. In
            contrast, an Item ID represents a single version of a file.
            For example, when users upload or modify an existing file, a new Item
            is created with the same StreamID. All default Item enumerations return only the latest version of a given stream.
            Use this method to retrieve previous versions of a given stream.
            </remarks>
            <param name="url"></param>
            <param name="includeDeleted"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.ByPath(System.String)">
            <summary>
            Get Item by Path
            </summary>
            <remarks>
            Retrieves an item from its path. The path is of format /foldername/foldername/filename
            This call may redirect the client to another API provider, if the path
            contains a symbolic link.
            </remarks>
            <param name="path"></param>
            <returns>
            An item identified by a path
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.ByPath(System.Uri,System.String)">
            <summary>
            Get Item by relative Path from ID
            </summary>
            <remarks>
            Retrieves an item from its path, relative to the provided ID.
            The path is of format /foldername/foldername/filename
            This call may redirect the client to another API provider, if the path
            contains a symbolic link.
            </remarks>
            <param name="url"></param>
            <param name="path"></param>
            <returns>
            An item identified by a path
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.GetParent(System.Uri)">
            <summary>
            Get Parent Item
            </summary>
            <remarks>
            Retrieves the Parent navigation property of a single Item.
            </remarks>
            <param name="url"></param>
            <returns>
            the Parent Item of the give object ID.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.GetChildren(System.Uri,System.Boolean)">
            <summary>
            Get Children
            </summary>
            <remarks>
            Handler for the Children navigation property of a given Item.
            A 302 redirection is returned if the folder is a SymbolicLink. The redirection
            will enumerate the children of the remote connector
            </remarks>
            <param name="url"></param>
            <param name="includeDeleted"></param>
            <returns>
            the list of children under the given object ID
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.GetInfo(System.Uri)">
            <summary>
            Get Folder Access Info
            </summary>
            <remarks>
            Returns the effective Access Controls for the current authenticated user for the
            selected folder - i.e., the resulting set of Access Controls for the Item/User context.This operation applies to Folders only, will return an error for other Item types.
            </remarks>
            <param name="url"></param>
            <returns>
            The Folder Access Control Information
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.Download(System.Uri,System.Boolean,System.Boolean)">
            <summary>
            Download Item Content
            </summary>
            <remarks>
            Initiate the download operation for an item. It will return 302 redirection to the
            actual download link. For Folders, the download link will retrieve a ZIP archive
            with the contents of the Folder.
            </remarks>
            <param name="url"></param>
            <param name="redirect"></param>
            <param name="includeAllVersions"></param>
            <returns>
            the download link for the provided item content.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.BulkDownload(System.Uri,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Download Multiple Items
            </summary>
            <example>
            ["id1","id2",...]
            </example>
            <remarks>
            Initiate the download operation for items. It will return 302 redirection to the
            actual download link.
            </remarks>
            <param name="parentUrl"></param>
            <param name="ids"></param>
            <param name="redirect"></param>
            <returns>
            the download link for the provided item content.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.CreateFolder(System.Uri,ShareFile.Api.Models.Folder,System.Boolean,System.Boolean)">
            <summary>
            Create Folder
            </summary>
            <example>
            {
            "Name":"Folder Name",
            "Description":"Description",
            "Zone":{ "Id":"z014766e-8e96-4615-86aa-57132a69843c" }
            }
            </example>
            <remarks>
            Creates a new Folder.
            The POST body must contain the serialized object.
            For top-level folders, use Items/Folder.
            The Zone object may only be provided for top-level folders. The Zone object must
            contain a zone ID.
            </remarks>
            <param name="parentUrl"></param>
            <param name="folder"></param>
            <param name="overwrite"></param>
            <param name="passthrough"></param>
            <returns>
            the new Folder
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.CreateNote(System.Uri,ShareFile.Api.Models.Note)">
            <summary>
            Create Note
            </summary>
            <example>
            {
            "Name":"Note Name",
            "Description":"Description"
            }
            </example>
            <remarks>
            Creates a new Note.
            </remarks>
            <param name="parentUrl"></param>
            <param name="note"></param>
            <returns>
            the new Note
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.CreateLink(System.Uri,ShareFile.Api.Models.Link)">
            <summary>
            Create Link
            </summary>
            <example>
            {
            "Name":"Link Name",
            "Description":"Description",
            "Uri":"https://server/path"
            }
            </example>
            <remarks>
            Creates a new Link
            </remarks>
            <param name="parentUrl"></param>
            <param name="link"></param>
            <returns>
            the new Link
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.CreateSymbolicLink(System.Uri,ShareFile.Api.Models.SymbolicLink,System.Boolean)">
            <summary>
            Create SymbolicLink
            </summary>
            <example>
            {
            "Name":"RemoteFileName",
            "Description":"Description",
            "Zone":{ "Id":"z014766e-8e96-4615-86aa-57132a69843c" },
            "ConnectorGroup": { "Id":"1" }
            }
            </example>
            <remarks>
            Creates a Symbolic Link
            The body must contain either a "Link" parameter with a fully qualified URI; or use
            FileName + Zone to have sharefile.com attempt to convert the Connector path to an
            URI using a call to the Zone - using ShareFile Hash authentication mode. For active
            clients, it's recommended to make the convertion call to the Zone directly, using
            Items/ByPath=name, retriving the resulting URL, and calling this method with the
            Link parameter.SymbolicLinks must be created as top-level folders - i.e., this call requires
            the parent to be the Item(accountid) element.Zone defines the location of the SymbolicLink target - for example, for
            Network Shares connectors, the SymbolicLink will point to the StorageZone Controller
            that will serve the file browsing requests.The ConnectorGroup parameter indicates the kind of symbolic link - e.g., Network
            Share, or SharePoint.
            </remarks>
            <param name="parentUrl"></param>
            <param name="symlink"></param>
            <param name="overwrite"></param>
            <returns>
            the new SymbolicLink
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.CreateChildrenByConnectorGroup(System.Uri,ShareFile.Api.Models.SymbolicLink,System.Boolean)">
            <summary>
            Creates SymbolicLink
            </summary>
            <example>
            {
            "Name":"RemoteFileName",
            "Description":"Description",
            "Link":"https://server/provider/version/Items(id)",
            "Zone":{ "Id":"z014766e-8e96-4615-86aa-57132a69843c" },
            "ConnectorGroup": { "Id":"1" }
            }
            </example>
            <param name="url"></param>
            <param name="symlink"></param>
            <param name="overwrite"></param>
            <returns>
            the new SymbolicLink
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.Update(System.Uri,ShareFile.Api.Models.Item,System.String,System.Int64,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Update Item
            </summary>
            <example>
            {
            "Name":"Name",
            "FileName":"FileName",
            "Description":"Description",
            "ExpirationDate": "date",
            "Parent": { "Id": "parentid" },
            "Zone": { "Id": "zoneid" }
            }
            </example>
            <remarks>
            Updates an Item object. Please note that for a Folder, the Name and FileName properties must be consistent.
            If a new Name is provided, the FileName will also be updated with the new name, and viceversa.
            If both Name and FileName are provided, FileName is disregarded and Name will be used to update both properties.
            </remarks>
            <param name="url"></param>
            <param name="item"></param>
            <param name="forceSync"></param>
            <returns>
            A modified Item object. If the item Zone or Parent Zone is modified, then this
            method will return an Asynchronous operation record instead. Note: the parameters listed in the
            body of the request are the only parameters that can be updated through this call.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.UpdateLink(System.String,ShareFile.Api.Models.Link,System.Boolean)">
            <summary>
            Update Link
            </summary>
            <example>
            {
            "Name":"Name",
            "Uri":"https://server/path",
            "Description":"Description",
            "Parent": { "Id": "parentid" },
            }
            </example>
            <remarks>
            Updates a Link object
            </remarks>
            <param name="id"></param>
            <param name="link"></param>
            <param name="notify"></param>
            <returns>
            A modified Link object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.UpdateNote(System.String,ShareFile.Api.Models.Note,System.Boolean)">
            <summary>
            Update Note
            </summary>
            <example>
            {
            "Name":"Name",
            "Description":"Description",
            "Parent": { "Id": "parentid" },
            }
            </example>
            <remarks>
            Updates a Note object
            </remarks>
            <param name="id"></param>
            <param name="note"></param>
            <param name="notify"></param>
            <returns>
            The modified Note object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.UpdateSymbolicLink(System.String,ShareFile.Api.Models.SymbolicLink)">
            <summary>
            Update SymbolicLink
            </summary>
            <example>
            {
            "Name":"Name",
            "Description":"Description",
            "Link": "https://server/path"
            }
            </example>
            <remarks>
            Updates a Symbolic Link object
            </remarks>
            <param name="id"></param>
            <param name="symlink"></param>
            <returns>
            The modified SymbolicLink object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.Delete(System.Uri,System.Boolean,System.Boolean)">
            <summary>
            Delete Item
            </summary>
            <remarks>
            Removes an item
            </remarks>
            <param name="url"></param>
            <param name="singleversion"></param>
            <param name="forceSync"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.BulkDelete(System.Uri,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
            <summary>
            Delete Multiple Items
            </summary>
            <example>
            ["id1","id2",...]
            </example>
            <remarks>
            All items in bulk delete must be children of the same parent, identified in the URI
            </remarks>
            <param name="parentUrl"></param>
            <param name="ids"></param>
            <param name="forceSync"></param>
            <param name="deletePermanently"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.GetThumbnail(System.Uri,System.Int32,System.Boolean)">
            <summary>
            Get Thumbnail
            </summary>
            <remarks>
            Retrieve a thumbnail link from the specified Item.
            </remarks>
            <param name="url"></param>
            <param name="size"></param>
            <param name="redirect"></param>
            <returns>
            A 302 redirection to the Thumbnail link
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.GetBreadcrumbs(System.Uri,System.String)">
            <summary>
            Get Breadcrumbs
            </summary>
            <remarks>
            Retrieves the path from an item from the root. The return list is a Feed of Items, with the top-level
            folder at the first position. If this item is in a Connection path, the breadcrumbs may contain URL
            reference back to the parent account - and the Item in the feed will contain just the URL reference.
            </remarks>
            <param name="url"></param>
            <param name="path"></param>
            <returns>
            A feed containing the path of folders from the specified root to the item, in order
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.Copy(System.Uri,System.String,System.Boolean)">
            <summary>
            Copy Item
            </summary>
            <remarks>
            Copies an item to a new target Folder. If the target folder is in another zone, the operation will
            return an AsyncOperation record instead. Clients may query the /AsyncOperation Entity to determine
            operation progress and result.
            </remarks>
            <param name="url"></param>
            <param name="targetid"></param>
            <param name="overwrite"></param>
            <returns>
            the modified source object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.Upload(System.Uri,ShareFile.Api.Models.UploadMethod,System.Boolean,System.String,System.Int64,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            Upload File
            </summary>
            <example>
            POST https://account.sf-api.com/sf/v3/Items(id)/Upload2
            {
            "Method":"Method",
            "Raw": false,
            "FileName":"FileName"
            "FileLength": length
            }
            </example>
            <remarks>
            Prepares the links for uploading files to the target Folder.
            This method returns an Upload Specification object. The fields are
            populated based on the upload method, provider, and resume parameters passed to the
            upload call.
            The Method determines how the URLs must be called.
            
            There are two different URL's to upload: /sf/v3/Items(id)/Upload? accepts the upload parameters
            through a query URL string, while /sf/v3/Items(id)/Upload2 does it through the HTTP POST message body.
            If using 'Upload2', the parameters must be capitalized.
            
            Standard uploads use a single HTTP POST message to the ChunkUri address provided in
            the response. All other fields will be empty. Standard uploads do not support Resume.
            
            Streamed uploads use multiple HTTP POST calls to the ChunkUri address. The client must
            append the parameters index, offset and hash to the end of the ChunkUri address. Index
            is a sequential number representing the data block (zero-based); Offset represents the
            byte offset for the block; and hash contains the MD5 hash of the block. The last HTTP
            POST must also contain finish=true parameter as well as filehash=[MD5 hash of entire file].
            
            Threaded uploads use multiple HTTP POST calls to ChunkUri, and can have a number of
            threads issuing blocks in parallel. Clients must append index, offset and hash to
            the end of ChunkUri, as explained in Streamed. After all chunks were sent, the client
            must call the FinishUri provided in this spec.
            
            If using the Threaded Uploader, you can attach the argument fmt=json to each ChunkUri
            to indicate you wish to retrieve the Item ID of the file after the upload is completed.
            
            For all uploaders, the contents of the POST Body can either be "raw", if the "Raw" parameter
            was provided to the Uploader, or use MIME multi-part form encoding otherwise. Raw uploads
            simply put the block content in the POST body - Content-Length specifies the size. Multi-part
            form encoding has to pass the File as a Form parameter named "Filedata".
            
            For streamed and threaded, if Resume options were provided to the Upload call, then the
            fields IsResume, ResumeIndex, ResumeOffset and ResumeFileHash MAY be populated. If they are,
            it indicates that the server has identified a partial upload with that specification, and is
            ready to resume on the provided parameters. The clients can then verify the ResumeFileHash to
            ensure the file has not been modified; and continue issuing ChunkUri calls from the ResumeIndex
            ResumeOffset parameters. If the client decides to restart, it should simply ignore the resume
            parameters and send the blocks from Index 0.
            
            For all uploaders: the result code for the HTTP POST calls to Chunk and Finish Uri can either
            be a 401 - indicating authentication is required; 4xx/5xx indicating some kind of error; or
            200 with a Content Body of format 'ERROR:message'. Successful calls will return either a 200
            response with no Body, or with Body of format 'OK'.
            </remarks>
            <param name="url"></param>
            <param name="method"></param>
            <param name="raw"></param>
            <param name="fileName"></param>
            <param name="fileSize"></param>
            <param name="batchId"></param>
            <param name="batchLast"></param>
            <param name="canResume"></param>
            <param name="startOver"></param>
            <param name="unzip"></param>
            <param name="tool"></param>
            <param name="overwrite"></param>
            <param name="title"></param>
            <param name="details"></param>
            <param name="isSend"></param>
            <param name="sendGuid"></param>
            <param name="opid"></param>
            <param name="threadCount"></param>
            <param name="responseFormat"></param>
            <param name="notify"></param>
            <param name="clientCreatedDateUTC"></param>
            <param name="clientModifiedDateUTC"></param>
            <returns>
            an Upload Specification element, containing the links for uploading, and the parameters for resume.
            The caller must know the protocol for sending the prepare, chunk and finish URLs returned in the spec; as well as
            negotiate the resume upload.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.CheckIn(System.Uri,System.String)">
            <summary>
            Unlock File
            </summary>
            <remarks>
            Unlock a locked file.
            This operation is only implemented in Sharepoint providers (/sp)
            </remarks>
            <param name="url"></param>
            <param name="message"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.Search(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Search
            </summary>
            <remarks>
            Search for Items matching the criteria of the query parameter
            </remarks>
            <param name="query"></param>
            <param name="maxResults"></param>
            <param name="skip"></param>
            <param name="homeFolderOnly"></param>
            <returns>
            SearchResults
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.AdvancedSimpleSearch(ShareFile.Api.Models.SimpleSearchQuery)">
            <summary>
            Advanced Simple Search
            </summary>
            <example>
            {
            "Query":{
            "ItemType":"",
            "ParentID":"",
            "CreatorID":"",
            "SearchQuery":"",
            "CreateStartDate":"",
            "CreateEndDate":"",
            "ItemNameOnly":false
            },
            "Paging":{
            "PageNumber":1, (Deprecated)
            "PageSize":10, (Deprecated)
            "Count": 50
            "Skip": 0
            },
            "Sort":{
            "SortBy":"",
            "Ascending":false,
            },
            "TimeoutInSeconds":10
            }
            </example>
            <remarks>
            Search for Items matching the criteria of the query parameter
            </remarks>
            <param name="simpleSearchQuery"></param>
            <returns>
            AdvancedSearchResults
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.AdvancedSearch(ShareFile.Api.Models.SearchQuery)">
            <summary>
            Advanced Search
            </summary>
            <example>
            {
            "Query":{
            "ItemTypes":["type1", "type2", ...],
            "ParentID":["id1", "id2", ...],
            "CreatorID":["id1", "id2", ...],
            "SearchQuery":"",
            "CreateStartDate":"",
            "CreateEndDate":"",
            "ItemNameOnly":false
            },
            "Paging":{
            "PageNumber":1, (deprecated)
            "PageSize":10, (deprecated)
            "Count":50, (default value)
            "Skip":0, (default value)
            },
            "Sort":{
            "SortBy":"",
            "Ascending":false,
            },
            "TimeoutInSeconds":10
            }
            </example>
            <remarks>
            Search for Items matching the criteria of the query parameter
            </remarks>
            <param name="searchQuery"></param>
            <returns>
            AdvancedSearchResults
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.WebView(System.Uri)">
            <summary>
            Get Web Preview Link
            </summary>
            <remarks>
            Redirects the caller to the Web Edit application for the selected item.
            </remarks>
            <param name="url"></param>
            <returns>
            A redirection message to the Web Edit app for this item. It returns 404 (Not Found)
            if the Web Preview app doesn't support the file type.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.GetProtocolLinks(System.Uri,ShareFile.Api.Models.PreviewPlatform)">
            <summary>
            Get List of Item Protocol Links
            </summary>
            <param name="url"></param>
            <param name="platform"></param>
            <returns>
            A list of protocol links depending on the input parameter 'platform', 404 (Not Found) if not supported by the item
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.GetRedirection(System.Uri)">
            <summary>
            Get Redirection endpoint Information
            </summary>
            <remarks>
            Returns the redirection endpoint for this Item.This operation applies to Folders and SymbolicLinks only, will return an error for other Item types.
            </remarks>
            <param name="url"></param>
            <returns>
            The Redirection endpoint Information
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.GetDeletedChildren(System.Uri,System.String)">
            <summary>
            Get a collection of recoverable/deleted items in a folder
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.BulkRestore(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Restore expired items to their original locations
            </summary>
            <param name="ids"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.BulkDeletePermanently(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Permanently delete multiple items
            </summary>
            <param name="itemIds"></param>
            <param name="ids"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.WebAppLink(System.Uri)">
            <summary>
            Create a one-time use login Uri for the Web App.
            </summary>
            <param name="url"></param>
            <returns>
            Redirection populated with link in Uri field
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.RemoveTemplateAssociation(System.Uri,System.String)">
            <summary>
            Remove folder template association from folder
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.CheckTemplateOwned(System.Uri,System.String)">
            <summary>
            Check if template is already part of an existing template structure
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.CheckVersioningViolation(System.Uri,System.String,System.Int32)">
            <summary>
            Check if a versioning change would result in file deletions
            </summary>
            <param name="url"></param>
            <param name="newMaxVersions"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ShareFile.Api.Client.Entities.ItemsEntity.Get" -->
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.Get(System.Uri,System.Boolean)">
            <summary>
            Get Item by ID
            </summary>
            <remarks>
            Returns a single Item.
            Special Id's:home, favorites, allshared, connectors, box, top. home - Return home folder.
            favorites - Return parent favorite item; use .../Items(favorites)/Children to get the favorite folders.
            allshared - Return parent Shared Folders item; use .../Items(allshared)/Children to get the shared folders.
            connectors - Return parent Connectors item; use .../Items(connectors)/Children to get indiviual connectors.
            box - Return the FileBox folder. top - Returns the Top item; use .../Items(top)/Children to get the home, favorites, and shared folders as well as the connectors
            </remarks>
            <param name="url"></param>
            <param name="includeDeleted"></param>
            <returns>
            a single Item
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.Get(System.Uri,ShareFile.Api.Models.TreeMode,System.String,System.Boolean,System.Boolean)">
            <summary>
            Get TreeView
            </summary>
            <remarks>
            Retrieves a folder list structure tailored for TreeView navigation - used by clients
            to create folder trees for specific operations.
            This operation will enforce a specific $select and $expand operators. You can provide
            additional $expand, for example Children, which is not added by default. The $select
            operator will apply to the expanded objects as well. You can also specify additional
            $select elements.
            </remarks>
            <param name="url"></param>
            <param name="treeMode"></param>
            <param name="sourceId"></param>
            <param name="canCreateRootFolder"></param>
            <param name="fileBox"></param>
            <returns>
            A tree root element.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.GetChildrenByConnectorGroup(System.Uri)">
            <summary>
            Get Symbolic Links of a Connector Group
            </summary>
            <remarks>
            Retrieves the Symbolic Links of the provided Connector Group type. Connector Groups define
            classes of external data connectors - such as SharePoint, Network Shares. Symbolic Links
            represent a single Connector point to such classes - for example, a single SharePoint site,
            or a network share drive.
            </remarks>
            <param name="parentUrl"></param>
            <returns>
            The list of Symbolic Links associated with the given connector group.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.Stream(System.Uri,System.Boolean)">
            <summary>
            Get Stream
            </summary>
            <remarks>
            Retrieves the versions of a given Stream. The ID parameter must be a StreamID, otherwise an empty list is returned.
            StreamID is a property of all Items, representing the "Stream", ie., the collection of all versions of a file. In
            contrast, an Item ID represents a single version of a file.
            For example, when users upload or modify an existing file, a new Item
            is created with the same StreamID. All default Item enumerations return only the latest version of a given stream.
            Use this method to retrieve previous versions of a given stream.
            </remarks>
            <param name="url"></param>
            <param name="includeDeleted"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.ByPath(System.String)">
            <summary>
            Get Item by Path
            </summary>
            <remarks>
            Retrieves an item from its path. The path is of format /foldername/foldername/filename
            This call may redirect the client to another API provider, if the path
            contains a symbolic link.
            </remarks>
            <param name="path"></param>
            <returns>
            An item identified by a path
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.ByPath(System.Uri,System.String)">
            <summary>
            Get Item by relative Path from ID
            </summary>
            <remarks>
            Retrieves an item from its path, relative to the provided ID.
            The path is of format /foldername/foldername/filename
            This call may redirect the client to another API provider, if the path
            contains a symbolic link.
            </remarks>
            <param name="url"></param>
            <param name="path"></param>
            <returns>
            An item identified by a path
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.GetParent(System.Uri)">
            <summary>
            Get Parent Item
            </summary>
            <remarks>
            Retrieves the Parent navigation property of a single Item.
            </remarks>
            <param name="url"></param>
            <returns>
            the Parent Item of the give object ID.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.GetChildren(System.Uri,System.Boolean)">
            <summary>
            Get Children
            </summary>
            <remarks>
            Handler for the Children navigation property of a given Item.
            A 302 redirection is returned if the folder is a SymbolicLink. The redirection
            will enumerate the children of the remote connector
            </remarks>
            <param name="url"></param>
            <param name="includeDeleted"></param>
            <returns>
            the list of children under the given object ID
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.GetInfo(System.Uri)">
            <summary>
            Get Folder Access Info
            </summary>
            <remarks>
            Returns the effective Access Controls for the current authenticated user for the
            selected folder - i.e., the resulting set of Access Controls for the Item/User context.This operation applies to Folders only, will return an error for other Item types.
            </remarks>
            <param name="url"></param>
            <returns>
            The Folder Access Control Information
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.Download(System.Uri,System.Boolean,System.Boolean)">
            <summary>
            Download Item Content
            </summary>
            <remarks>
            Initiate the download operation for an item. It will return 302 redirection to the
            actual download link. For Folders, the download link will retrieve a ZIP archive
            with the contents of the Folder.
            </remarks>
            <param name="url"></param>
            <param name="redirect"></param>
            <param name="includeAllVersions"></param>
            <returns>
            the download link for the provided item content.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.BulkDownload(System.Uri,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Download Multiple Items
            </summary>
            <example>
            ["id1","id2",...]
            </example>
            <remarks>
            Initiate the download operation for items. It will return 302 redirection to the
            actual download link.
            </remarks>
            <param name="parentUrl"></param>
            <param name="ids"></param>
            <param name="redirect"></param>
            <returns>
            the download link for the provided item content.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.CreateFolder(System.Uri,ShareFile.Api.Models.Folder,System.Boolean,System.Boolean)">
            <summary>
            Create Folder
            </summary>
            <example>
            {
            "Name":"Folder Name",
            "Description":"Description",
            "Zone":{ "Id":"z014766e-8e96-4615-86aa-57132a69843c" }
            }
            </example>
            <remarks>
            Creates a new Folder.
            The POST body must contain the serialized object.
            For top-level folders, use Items/Folder.
            The Zone object may only be provided for top-level folders. The Zone object must
            contain a zone ID.
            </remarks>
            <param name="parentUrl"></param>
            <param name="folder"></param>
            <param name="overwrite"></param>
            <param name="passthrough"></param>
            <returns>
            the new Folder
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.CreateNote(System.Uri,ShareFile.Api.Models.Note)">
            <summary>
            Create Note
            </summary>
            <example>
            {
            "Name":"Note Name",
            "Description":"Description"
            }
            </example>
            <remarks>
            Creates a new Note.
            </remarks>
            <param name="parentUrl"></param>
            <param name="note"></param>
            <returns>
            the new Note
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.CreateLink(System.Uri,ShareFile.Api.Models.Link)">
            <summary>
            Create Link
            </summary>
            <example>
            {
            "Name":"Link Name",
            "Description":"Description",
            "Uri":"https://server/path"
            }
            </example>
            <remarks>
            Creates a new Link
            </remarks>
            <param name="parentUrl"></param>
            <param name="link"></param>
            <returns>
            the new Link
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.CreateSymbolicLink(System.Uri,ShareFile.Api.Models.SymbolicLink,System.Boolean)">
            <summary>
            Create SymbolicLink
            </summary>
            <example>
            {
            "Name":"RemoteFileName",
            "Description":"Description",
            "Zone":{ "Id":"z014766e-8e96-4615-86aa-57132a69843c" },
            "ConnectorGroup": { "Id":"1" }
            }
            </example>
            <remarks>
            Creates a Symbolic Link
            The body must contain either a "Link" parameter with a fully qualified URI; or use
            FileName + Zone to have sharefile.com attempt to convert the Connector path to an
            URI using a call to the Zone - using ShareFile Hash authentication mode. For active
            clients, it's recommended to make the convertion call to the Zone directly, using
            Items/ByPath=name, retriving the resulting URL, and calling this method with the
            Link parameter.SymbolicLinks must be created as top-level folders - i.e., this call requires
            the parent to be the Item(accountid) element.Zone defines the location of the SymbolicLink target - for example, for
            Network Shares connectors, the SymbolicLink will point to the StorageZone Controller
            that will serve the file browsing requests.The ConnectorGroup parameter indicates the kind of symbolic link - e.g., Network
            Share, or SharePoint.
            </remarks>
            <param name="parentUrl"></param>
            <param name="symlink"></param>
            <param name="overwrite"></param>
            <returns>
            the new SymbolicLink
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.CreateChildrenByConnectorGroup(System.Uri,ShareFile.Api.Models.SymbolicLink,System.Boolean)">
            <summary>
            Creates SymbolicLink
            </summary>
            <example>
            {
            "Name":"RemoteFileName",
            "Description":"Description",
            "Link":"https://server/provider/version/Items(id)",
            "Zone":{ "Id":"z014766e-8e96-4615-86aa-57132a69843c" },
            "ConnectorGroup": { "Id":"1" }
            }
            </example>
            <param name="url"></param>
            <param name="symlink"></param>
            <param name="overwrite"></param>
            <returns>
            the new SymbolicLink
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.Update(System.Uri,ShareFile.Api.Models.Item,System.String,System.Int64,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Update Item
            </summary>
            <example>
            {
            "Name":"Name",
            "FileName":"FileName",
            "Description":"Description",
            "ExpirationDate": "date",
            "Parent": { "Id": "parentid" },
            "Zone": { "Id": "zoneid" }
            }
            </example>
            <remarks>
            Updates an Item object. Please note that for a Folder, the Name and FileName properties must be consistent.
            If a new Name is provided, the FileName will also be updated with the new name, and viceversa.
            If both Name and FileName are provided, FileName is disregarded and Name will be used to update both properties.
            </remarks>
            <param name="url"></param>
            <param name="item"></param>
            <param name="forceSync"></param>
            <returns>
            A modified Item object. If the item Zone or Parent Zone is modified, then this
            method will return an Asynchronous operation record instead. Note: the parameters listed in the
            body of the request are the only parameters that can be updated through this call.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.UpdateLink(System.String,ShareFile.Api.Models.Link,System.Boolean)">
            <summary>
            Update Link
            </summary>
            <example>
            {
            "Name":"Name",
            "Uri":"https://server/path",
            "Description":"Description",
            "Parent": { "Id": "parentid" },
            }
            </example>
            <remarks>
            Updates a Link object
            </remarks>
            <param name="id"></param>
            <param name="link"></param>
            <param name="notify"></param>
            <returns>
            A modified Link object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.UpdateNote(System.String,ShareFile.Api.Models.Note,System.Boolean)">
            <summary>
            Update Note
            </summary>
            <example>
            {
            "Name":"Name",
            "Description":"Description",
            "Parent": { "Id": "parentid" },
            }
            </example>
            <remarks>
            Updates a Note object
            </remarks>
            <param name="id"></param>
            <param name="note"></param>
            <param name="notify"></param>
            <returns>
            The modified Note object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.UpdateSymbolicLink(System.String,ShareFile.Api.Models.SymbolicLink)">
            <summary>
            Update SymbolicLink
            </summary>
            <example>
            {
            "Name":"Name",
            "Description":"Description",
            "Link": "https://server/path"
            }
            </example>
            <remarks>
            Updates a Symbolic Link object
            </remarks>
            <param name="id"></param>
            <param name="symlink"></param>
            <returns>
            The modified SymbolicLink object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.Delete(System.Uri,System.Boolean,System.Boolean)">
            <summary>
            Delete Item
            </summary>
            <remarks>
            Removes an item
            </remarks>
            <param name="url"></param>
            <param name="singleversion"></param>
            <param name="forceSync"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.BulkDelete(System.Uri,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
            <summary>
            Delete Multiple Items
            </summary>
            <example>
            ["id1","id2",...]
            </example>
            <remarks>
            All items in bulk delete must be children of the same parent, identified in the URI
            </remarks>
            <param name="parentUrl"></param>
            <param name="ids"></param>
            <param name="forceSync"></param>
            <param name="deletePermanently"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.GetThumbnail(System.Uri,System.Int32,System.Boolean)">
            <summary>
            Get Thumbnail
            </summary>
            <remarks>
            Retrieve a thumbnail link from the specified Item.
            </remarks>
            <param name="url"></param>
            <param name="size"></param>
            <param name="redirect"></param>
            <returns>
            A 302 redirection to the Thumbnail link
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.GetBreadcrumbs(System.Uri,System.String)">
            <summary>
            Get Breadcrumbs
            </summary>
            <remarks>
            Retrieves the path from an item from the root. The return list is a Feed of Items, with the top-level
            folder at the first position. If this item is in a Connection path, the breadcrumbs may contain URL
            reference back to the parent account - and the Item in the feed will contain just the URL reference.
            </remarks>
            <param name="url"></param>
            <param name="path"></param>
            <returns>
            A feed containing the path of folders from the specified root to the item, in order
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.Copy(System.Uri,System.String,System.Boolean)">
            <summary>
            Copy Item
            </summary>
            <remarks>
            Copies an item to a new target Folder. If the target folder is in another zone, the operation will
            return an AsyncOperation record instead. Clients may query the /AsyncOperation Entity to determine
            operation progress and result.
            </remarks>
            <param name="url"></param>
            <param name="targetid"></param>
            <param name="overwrite"></param>
            <returns>
            the modified source object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.Upload(System.Uri,ShareFile.Api.Models.UploadMethod,System.Boolean,System.String,System.Int64,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            Upload File
            </summary>
            <example>
            POST https://account.sf-api.com/sf/v3/Items(id)/Upload2
            {
            "Method":"Method",
            "Raw": false,
            "FileName":"FileName"
            "FileLength": length
            }
            </example>
            <remarks>
            Prepares the links for uploading files to the target Folder.
            This method returns an Upload Specification object. The fields are
            populated based on the upload method, provider, and resume parameters passed to the
            upload call.
            The Method determines how the URLs must be called.
            
            There are two different URL's to upload: /sf/v3/Items(id)/Upload? accepts the upload parameters
            through a query URL string, while /sf/v3/Items(id)/Upload2 does it through the HTTP POST message body.
            If using 'Upload2', the parameters must be capitalized.
            
            Standard uploads use a single HTTP POST message to the ChunkUri address provided in
            the response. All other fields will be empty. Standard uploads do not support Resume.
            
            Streamed uploads use multiple HTTP POST calls to the ChunkUri address. The client must
            append the parameters index, offset and hash to the end of the ChunkUri address. Index
            is a sequential number representing the data block (zero-based); Offset represents the
            byte offset for the block; and hash contains the MD5 hash of the block. The last HTTP
            POST must also contain finish=true parameter as well as filehash=[MD5 hash of entire file].
            
            Threaded uploads use multiple HTTP POST calls to ChunkUri, and can have a number of
            threads issuing blocks in parallel. Clients must append index, offset and hash to
            the end of ChunkUri, as explained in Streamed. After all chunks were sent, the client
            must call the FinishUri provided in this spec.
            
            If using the Threaded Uploader, you can attach the argument fmt=json to each ChunkUri
            to indicate you wish to retrieve the Item ID of the file after the upload is completed.
            
            For all uploaders, the contents of the POST Body can either be "raw", if the "Raw" parameter
            was provided to the Uploader, or use MIME multi-part form encoding otherwise. Raw uploads
            simply put the block content in the POST body - Content-Length specifies the size. Multi-part
            form encoding has to pass the File as a Form parameter named "Filedata".
            
            For streamed and threaded, if Resume options were provided to the Upload call, then the
            fields IsResume, ResumeIndex, ResumeOffset and ResumeFileHash MAY be populated. If they are,
            it indicates that the server has identified a partial upload with that specification, and is
            ready to resume on the provided parameters. The clients can then verify the ResumeFileHash to
            ensure the file has not been modified; and continue issuing ChunkUri calls from the ResumeIndex
            ResumeOffset parameters. If the client decides to restart, it should simply ignore the resume
            parameters and send the blocks from Index 0.
            
            For all uploaders: the result code for the HTTP POST calls to Chunk and Finish Uri can either
            be a 401 - indicating authentication is required; 4xx/5xx indicating some kind of error; or
            200 with a Content Body of format 'ERROR:message'. Successful calls will return either a 200
            response with no Body, or with Body of format 'OK'.
            </remarks>
            <param name="url"></param>
            <param name="method"></param>
            <param name="raw"></param>
            <param name="fileName"></param>
            <param name="fileSize"></param>
            <param name="batchId"></param>
            <param name="batchLast"></param>
            <param name="canResume"></param>
            <param name="startOver"></param>
            <param name="unzip"></param>
            <param name="tool"></param>
            <param name="overwrite"></param>
            <param name="title"></param>
            <param name="details"></param>
            <param name="isSend"></param>
            <param name="sendGuid"></param>
            <param name="opid"></param>
            <param name="threadCount"></param>
            <param name="responseFormat"></param>
            <param name="notify"></param>
            <param name="clientCreatedDateUTC"></param>
            <param name="clientModifiedDateUTC"></param>
            <returns>
            an Upload Specification element, containing the links for uploading, and the parameters for resume.
            The caller must know the protocol for sending the prepare, chunk and finish URLs returned in the spec; as well as
            negotiate the resume upload.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.CheckIn(System.Uri,System.String)">
            <summary>
            Unlock File
            </summary>
            <remarks>
            Unlock a locked file.
            This operation is only implemented in Sharepoint providers (/sp)
            </remarks>
            <param name="url"></param>
            <param name="message"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.Search(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Search
            </summary>
            <remarks>
            Search for Items matching the criteria of the query parameter
            </remarks>
            <param name="query"></param>
            <param name="maxResults"></param>
            <param name="skip"></param>
            <param name="homeFolderOnly"></param>
            <returns>
            SearchResults
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.AdvancedSimpleSearch(ShareFile.Api.Models.SimpleSearchQuery)">
            <summary>
            Advanced Simple Search
            </summary>
            <example>
            {
            "Query":{
            "ItemType":"",
            "ParentID":"",
            "CreatorID":"",
            "SearchQuery":"",
            "CreateStartDate":"",
            "CreateEndDate":"",
            "ItemNameOnly":false
            },
            "Paging":{
            "PageNumber":1, (Deprecated)
            "PageSize":10, (Deprecated)
            "Count": 50
            "Skip": 0
            },
            "Sort":{
            "SortBy":"",
            "Ascending":false,
            },
            "TimeoutInSeconds":10
            }
            </example>
            <remarks>
            Search for Items matching the criteria of the query parameter
            </remarks>
            <param name="simpleSearchQuery"></param>
            <returns>
            AdvancedSearchResults
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.AdvancedSearch(ShareFile.Api.Models.SearchQuery)">
            <summary>
            Advanced Search
            </summary>
            <example>
            {
            "Query":{
            "ItemTypes":["type1", "type2", ...],
            "ParentID":["id1", "id2", ...],
            "CreatorID":["id1", "id2", ...],
            "SearchQuery":"",
            "CreateStartDate":"",
            "CreateEndDate":"",
            "ItemNameOnly":false
            },
            "Paging":{
            "PageNumber":1, (deprecated)
            "PageSize":10, (deprecated)
            "Count":50, (default value)
            "Skip":0, (default value)
            },
            "Sort":{
            "SortBy":"",
            "Ascending":false,
            },
            "TimeoutInSeconds":10
            }
            </example>
            <remarks>
            Search for Items matching the criteria of the query parameter
            </remarks>
            <param name="searchQuery"></param>
            <returns>
            AdvancedSearchResults
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.WebView(System.Uri)">
            <summary>
            Get Web Preview Link
            </summary>
            <remarks>
            Redirects the caller to the Web Edit application for the selected item.
            </remarks>
            <param name="url"></param>
            <returns>
            A redirection message to the Web Edit app for this item. It returns 404 (Not Found)
            if the Web Preview app doesn't support the file type.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.GetProtocolLinks(System.Uri,ShareFile.Api.Models.PreviewPlatform)">
            <summary>
            Get List of Item Protocol Links
            </summary>
            <param name="url"></param>
            <param name="platform"></param>
            <returns>
            A list of protocol links depending on the input parameter 'platform', 404 (Not Found) if not supported by the item
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.GetRedirection(System.Uri)">
            <summary>
            Get Redirection endpoint Information
            </summary>
            <remarks>
            Returns the redirection endpoint for this Item.This operation applies to Folders and SymbolicLinks only, will return an error for other Item types.
            </remarks>
            <param name="url"></param>
            <returns>
            The Redirection endpoint Information
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.GetDeletedChildren(System.Uri,System.String)">
            <summary>
            Get a collection of recoverable/deleted items in a folder
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.BulkRestore(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Restore expired items to their original locations
            </summary>
            <param name="ids"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.BulkDeletePermanently(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Permanently delete multiple items
            </summary>
            <param name="itemIds"></param>
            <param name="ids"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.WebAppLink(System.Uri)">
            <summary>
            Create a one-time use login Uri for the Web App.
            </summary>
            <param name="url"></param>
            <returns>
            Redirection populated with link in Uri field
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.RemoveTemplateAssociation(System.Uri,System.String)">
            <summary>
            Remove folder template association from folder
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.CheckTemplateOwned(System.Uri,System.String)">
            <summary>
            Check if template is already part of an existing template structure
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.CheckVersioningViolation(System.Uri,System.String,System.Int32)">
            <summary>
            Check if a versioning change would result in file deletions
            </summary>
            <param name="url"></param>
            <param name="newMaxVersions"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IMetadataEntity.Get(System.Uri)">
            <summary>
            Get Metadata by ID
            </summary>
            <remarks>
            Retrieves a single Metadata entry that has a given Name for a given Item.
            Note:
            'GET https://account.sf-api.com/sf/v3/Items(parentid)/Metadata(id)' is unsupported.
            Current routing doesn't support the URI to retrieve a single Metadata enntry since it is aliased with the GetByItem feed.
            So for now we support only the same syntax as for AccessControls, i.e. .../Metadata(name=name,itemid=itemid)
            </remarks>
            <returns>
            A single Metadata object matching the query
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IMetadataEntity.GetByItem(System.Uri)">
            <summary>
            Get Metadata List By Item
            </summary>
            <remarks>
            Retrieves the Metadata List for a given Item.
            </remarks>
            <param name="url"></param>
            <returns>
            The Metadata list of the given object ID.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IMetadataEntity.CreateByItem(System.Uri,ShareFile.Api.Models.Metadata)">
            <summary>
            Create Metadata
            </summary>
            <example>
            {
            "Name":"metadata name",
            "Value":"metadata value"
            }
            </example>
            <remarks>
            Creates a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name already exists for this Item.
            </remarks>
            <param name="url"></param>
            <returns>
            The created Metadata object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IMetadataEntity.UpdateByItem(System.Uri,System.String,ShareFile.Api.Models.Metadata)">
            <summary>
            Update Metadata
            </summary>
            <example>
            {
            "Value":"metadata value"
            }
            </example>
            <remarks>
            Updates a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
            </remarks>
            <param name="url"></param>
            <param name="metadataId"></param>
            <returns>
            The updated Metadata object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IMetadataEntity.Update(System.Uri,ShareFile.Api.Models.Metadata)">
            <summary>
            Update Metadata
            </summary>
            <example>
            {
            "Value":"metadata value"
            }
            </example>
            <remarks>
            Updates a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
            </remarks>
            <returns>
            The updated Metadata object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IMetadataEntity.DeleteByItem(System.Uri,System.String)">
            <summary>
            Delete Metadata
            </summary>
            <remarks>
            Deletes a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
            </remarks>
            <param name="url"></param>
            <param name="metadataId"></param>
            <returns>
            (no data)
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IMetadataEntity.Delete(System.Uri)">
            <summary>
            Delete Metadata
            </summary>
            <remarks>
            Deletes a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
            </remarks>
            <returns>
            (no data)
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.MetadataEntity.Get(System.Uri)">
            <summary>
            Get Metadata by ID
            </summary>
            <remarks>
            Retrieves a single Metadata entry that has a given Name for a given Item.
            Note:
            'GET https://account.sf-api.com/sf/v3/Items(parentid)/Metadata(id)' is unsupported.
            Current routing doesn't support the URI to retrieve a single Metadata enntry since it is aliased with the GetByItem feed.
            So for now we support only the same syntax as for AccessControls, i.e. .../Metadata(name=name,itemid=itemid)
            </remarks>
            <returns>
            A single Metadata object matching the query
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.MetadataEntity.GetByItem(System.Uri)">
            <summary>
            Get Metadata List By Item
            </summary>
            <remarks>
            Retrieves the Metadata List for a given Item.
            </remarks>
            <param name="url"></param>
            <returns>
            The Metadata list of the given object ID.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.MetadataEntity.CreateByItem(System.Uri,ShareFile.Api.Models.Metadata)">
            <summary>
            Create Metadata
            </summary>
            <example>
            {
            "Name":"metadata name",
            "Value":"metadata value"
            }
            </example>
            <remarks>
            Creates a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name already exists for this Item.
            </remarks>
            <param name="url"></param>
            <returns>
            The created Metadata object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.MetadataEntity.UpdateByItem(System.Uri,System.String,ShareFile.Api.Models.Metadata)">
            <summary>
            Update Metadata
            </summary>
            <example>
            {
            "Value":"metadata value"
            }
            </example>
            <remarks>
            Updates a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
            </remarks>
            <param name="url"></param>
            <param name="metadataId"></param>
            <returns>
            The updated Metadata object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.MetadataEntity.Update(System.Uri,ShareFile.Api.Models.Metadata)">
            <summary>
            Update Metadata
            </summary>
            <example>
            {
            "Value":"metadata value"
            }
            </example>
            <remarks>
            Updates a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
            </remarks>
            <returns>
            The updated Metadata object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.MetadataEntity.DeleteByItem(System.Uri,System.String)">
            <summary>
            Delete Metadata
            </summary>
            <remarks>
            Deletes a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
            </remarks>
            <param name="url"></param>
            <param name="metadataId"></param>
            <returns>
            (no data)
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.MetadataEntity.Delete(System.Uri)">
            <summary>
            Delete Metadata
            </summary>
            <remarks>
            Deletes a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
            </remarks>
            <returns>
            (no data)
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IReportsEntity.Get">
            <summary>
            Get Reports for Current Account
            </summary>
            <remarks>
            Returns all the reports configured for the current account. By expanding the Records property, a list of all ReportRecords can be accessed as well.
            </remarks>
            <returns>
            Reports for current account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IReportsEntity.Get(System.Uri)">
            <summary>
            Get Report by ID
            </summary>
            <remarks>
            Returns a single report specified by id. The Records property is expandable.
            </remarks>
            <param name="url"></param>
            <returns>
            Single Report
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IReportsEntity.GetRecent">
            <summary>
            Get recent reports
            </summary>
            <remarks>
            Returns the last 10 reports run for the current account.
            </remarks>
            <returns>
            List of reports
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IReportsEntity.GetRecurring">
            <summary>
            Get recurring reports
            </summary>
            <remarks>
            Returns all recurring reports for the current account.
            </remarks>
            <returns>
            List of reports
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IReportsEntity.GetRecord(System.String)">
            <summary>
            Get Report Record by ID
            </summary>
            <remarks>
            Returns a single record.
            </remarks>
            <param name="id"></param>
            <returns>
            Single Record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IReportsEntity.GetRecords(System.Uri)">
            <summary>
            Get all Records by Report ID
            </summary>
            <remarks>
            Returns all records for a single report.
            </remarks>
            <param name="url"></param>
            <returns>
            Records for a Report
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IReportsEntity.Create(ShareFile.Api.Models.Report,System.Boolean)">
            <summary>
            Create Report
            </summary>
            <example>
            {
            "Id": "rs24f83e-b147-437e-9f28-e7d03634af42"
            "Title": "Usage Report",
            "ReportType": "Activity",
            "ObjectType": "Account",
            "ObjectId": "a024f83e-b147-437e-9f28-e7d0ef634af42",
            "DateOption": "Last30Days",
            "SaveFormat": "Excel"
            }
            </example>
            <remarks>
            Creates a new Report.
            </remarks>
            <param name="report"></param>
            <param name="runOnCreate"></param>
            <returns>
            the created report
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IReportsEntity.Update(ShareFile.Api.Models.Report)">
            <summary>
            Update Report
            </summary>
            <example>
            {
            "Title": "Usage Report",
            "ReportType": "Activity",
            "ObjectType": "Account",
            "ObjectId": "a024f83e-b147-437e-9f28-e7d03634af42",
            "DateOption": "Last30Days",
            "Frequency": "Once"
            }
            </example>
            <remarks>
            Updates an existing report
            </remarks>
            <param name="report"></param>
            <returns>
            the updated report
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IReportsEntity.Delete(System.Uri)">
            <summary>
            Delete Report
            </summary>
            <remarks>
            Removes a report from the system
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IReportsEntity.GetRun(System.Uri)">
            <summary>
            Run Report
            </summary>
            <remarks>
            Run a report and get the run id.
            </remarks>
            <returns>
            ReportRecord
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IReportsEntity.Preview(System.Uri)">
            <summary>
            Get a preview location for the report
            </summary>
            <param name="reportUrl"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IReportsEntity.GetJsonData(System.String)">
            <summary>
            Get JSON Data
            </summary>
            <remarks>
            Get the JSON data for a report
            </remarks>
            <param name="id"></param>
            <returns>
            JSON Formatted Report Results
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IReportsEntity.Move(System.Uri,System.String)">
            <summary>
            Save a folder to a folder location
            </summary>
            <param name="reportUrl"></param>
            <param name="folderId"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IReportsEntity.DownloadData(System.String)">
            <summary>
            Get spreadsheet data
            </summary>
            <remarks>
            Get the spreadsheet data for a report
            </remarks>
            <param name="id"></param>
            <returns>
            Excel Formatted Report Results
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ReportsEntity.Get">
            <summary>
            Get Reports for Current Account
            </summary>
            <remarks>
            Returns all the reports configured for the current account. By expanding the Records property, a list of all ReportRecords can be accessed as well.
            </remarks>
            <returns>
            Reports for current account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ReportsEntity.Get(System.Uri)">
            <summary>
            Get Report by ID
            </summary>
            <remarks>
            Returns a single report specified by id. The Records property is expandable.
            </remarks>
            <param name="url"></param>
            <returns>
            Single Report
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ReportsEntity.GetRecent">
            <summary>
            Get recent reports
            </summary>
            <remarks>
            Returns the last 10 reports run for the current account.
            </remarks>
            <returns>
            List of reports
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ReportsEntity.GetRecurring">
            <summary>
            Get recurring reports
            </summary>
            <remarks>
            Returns all recurring reports for the current account.
            </remarks>
            <returns>
            List of reports
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ReportsEntity.GetRecord(System.String)">
            <summary>
            Get Report Record by ID
            </summary>
            <remarks>
            Returns a single record.
            </remarks>
            <param name="id"></param>
            <returns>
            Single Record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ReportsEntity.GetRecords(System.Uri)">
            <summary>
            Get all Records by Report ID
            </summary>
            <remarks>
            Returns all records for a single report.
            </remarks>
            <param name="url"></param>
            <returns>
            Records for a Report
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ReportsEntity.Create(ShareFile.Api.Models.Report,System.Boolean)">
            <summary>
            Create Report
            </summary>
            <example>
            {
            "Id": "rs24f83e-b147-437e-9f28-e7d03634af42"
            "Title": "Usage Report",
            "ReportType": "Activity",
            "ObjectType": "Account",
            "ObjectId": "a024f83e-b147-437e-9f28-e7d0ef634af42",
            "DateOption": "Last30Days",
            "SaveFormat": "Excel"
            }
            </example>
            <remarks>
            Creates a new Report.
            </remarks>
            <param name="report"></param>
            <param name="runOnCreate"></param>
            <returns>
            the created report
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ReportsEntity.Update(ShareFile.Api.Models.Report)">
            <summary>
            Update Report
            </summary>
            <example>
            {
            "Title": "Usage Report",
            "ReportType": "Activity",
            "ObjectType": "Account",
            "ObjectId": "a024f83e-b147-437e-9f28-e7d03634af42",
            "DateOption": "Last30Days",
            "Frequency": "Once"
            }
            </example>
            <remarks>
            Updates an existing report
            </remarks>
            <param name="report"></param>
            <returns>
            the updated report
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ReportsEntity.Delete(System.Uri)">
            <summary>
            Delete Report
            </summary>
            <remarks>
            Removes a report from the system
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ReportsEntity.GetRun(System.Uri)">
            <summary>
            Run Report
            </summary>
            <remarks>
            Run a report and get the run id.
            </remarks>
            <returns>
            ReportRecord
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ReportsEntity.Preview(System.Uri)">
            <summary>
            Get a preview location for the report
            </summary>
            <param name="reportUrl"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ReportsEntity.GetJsonData(System.String)">
            <summary>
            Get JSON Data
            </summary>
            <remarks>
            Get the JSON data for a report
            </remarks>
            <param name="id"></param>
            <returns>
            JSON Formatted Report Results
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ReportsEntity.Move(System.Uri,System.String)">
            <summary>
            Save a folder to a folder location
            </summary>
            <param name="reportUrl"></param>
            <param name="folderId"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ReportsEntity.DownloadData(System.String)">
            <summary>
            Get spreadsheet data
            </summary>
            <remarks>
            Get the spreadsheet data for a report
            </remarks>
            <param name="id"></param>
            <returns>
            Excel Formatted Report Results
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISessionsEntity.Get">
            <summary>
            Get Session
            </summary>
            <remarks>
            Retrieve the current authentication session object. If the client is not authenticated,
            this operation will challenge for ShareFile authentication using a 401 response. This method will
            not trigger the SAML authentication flow - use /Sessions/Login instead.
            </remarks>
            <returns>
            The current authentication Context, based on the request SFAPI_AuthID Cookie
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISessionsEntity.Delete">
            <summary>
            Logout
            </summary>
            <remarks>
            Logout the current session - invalidate the current Session ID
            </remarks>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISessionsEntity.Login(System.String,System.String)">
            <summary>
            Login
            </summary>
            <remarks>
            API clients can provide ShareFile Authentication directly to any API operation using OAuth (Bearer).
            However, the client must know that the provided authentication type is supported on the API endpoint; and that SAML is not configured.
            
            This API provides a generic authentication routine for clients. It will challenge for ShareFile credentials
            passing all supported authentication methods; redirect to the SAML IDP if configured to do so; and handle
            certain HTTP headers, like device registration.
            
            If the client is already authenticated, the Session object is returned. If the client is not authenticated, and
            the account is not configured for SAML, then the API will challenge for a local authentication. If the account
            is configured for SAML, then the client will be redirected to the SAML IDP using the SAML passive flow - authentication
            will be performed at the IDP domain instead. The IDP callback will be on the API Acs, which will return a Session
            object if authentication is accepted.
            
            The following HTTP Headers are also processed in this request, and stored with the Session object:
            X-SFAPI-Tool: Tool string (user-agent equivalent for ShareFile)X-SFAPI-ToolVersion: Tool Version stringX-SFAPI-UserInitiated: true or false, indicates whether this is an interactive login, or re-authentication
            initiated by the ToolX-SFAPI-DeviceId: Device Identifier. If set to 'register', a new DeviceID will be generated. This will
            either create or associate an existing DeviceID to this session - indicates user is logging in using this DeviceX-SFAPI-DeviceName: Device Name. Only required/used when a registration process occurs.
            </remarks>
            <param name="authmethod"></param>
            <param name="authcomparison"></param>
            <returns>
            A Session object, if authentication is successful
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISessionsEntity.Acs">
            <summary>
            Get Assertion Consumer Service. This is the IDP callback endpoint in SAML authentication
            </summary>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SessionsEntity.Get">
            <summary>
            Get Session
            </summary>
            <remarks>
            Retrieve the current authentication session object. If the client is not authenticated,
            this operation will challenge for ShareFile authentication using a 401 response. This method will
            not trigger the SAML authentication flow - use /Sessions/Login instead.
            </remarks>
            <returns>
            The current authentication Context, based on the request SFAPI_AuthID Cookie
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SessionsEntity.Delete">
            <summary>
            Logout
            </summary>
            <remarks>
            Logout the current session - invalidate the current Session ID
            </remarks>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SessionsEntity.Login(System.String,System.String)">
            <summary>
            Login
            </summary>
            <remarks>
            API clients can provide ShareFile Authentication directly to any API operation using OAuth (Bearer).
            However, the client must know that the provided authentication type is supported on the API endpoint; and that SAML is not configured.
            
            This API provides a generic authentication routine for clients. It will challenge for ShareFile credentials
            passing all supported authentication methods; redirect to the SAML IDP if configured to do so; and handle
            certain HTTP headers, like device registration.
            
            If the client is already authenticated, the Session object is returned. If the client is not authenticated, and
            the account is not configured for SAML, then the API will challenge for a local authentication. If the account
            is configured for SAML, then the client will be redirected to the SAML IDP using the SAML passive flow - authentication
            will be performed at the IDP domain instead. The IDP callback will be on the API Acs, which will return a Session
            object if authentication is accepted.
            
            The following HTTP Headers are also processed in this request, and stored with the Session object:
            X-SFAPI-Tool: Tool string (user-agent equivalent for ShareFile)X-SFAPI-ToolVersion: Tool Version stringX-SFAPI-UserInitiated: true or false, indicates whether this is an interactive login, or re-authentication
            initiated by the ToolX-SFAPI-DeviceId: Device Identifier. If set to 'register', a new DeviceID will be generated. This will
            either create or associate an existing DeviceID to this session - indicates user is logging in using this DeviceX-SFAPI-DeviceName: Device Name. Only required/used when a registration process occurs.
            </remarks>
            <param name="authmethod"></param>
            <param name="authcomparison"></param>
            <returns>
            A Session object, if authentication is successful
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SessionsEntity.Acs">
            <summary>
            Get Assertion Consumer Service. This is the IDP callback endpoint in SAML authentication
            </summary>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.Get">
            <summary>
            Get List of Shares
            </summary>
            <remarks>
            Retrieve all outstanding Shares of the authenticated user
            </remarks>
            <returns>
            List of Shares created by the authenticated user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.Get(System.Uri)">
            <summary>
            Get Share
            </summary>
            <remarks>
            Retrieve a single Share entity. If the Share allows anonymous access, then this method will not
            require authentication.
            </remarks>
            <param name="url"></param>
            <returns>
            A single Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.GetRecipients(System.Uri)">
            <summary>
            Get Recipients of a Share
            </summary>
            <remarks>
            Retrieve the list of Recipients in the share. Recipients represent the target users of the Share, containing
            access information, such as number of times that user downloaded files from the share. Each Recipient is
            identified by an Alias, which is an unique ID given to each user - allowing tracking of downloads for
            non-authenticated users.
            </remarks>
            <param name="url"></param>
            <returns>
            A feed of Share Aliases representing recipients of the Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.GetRecipients(System.Uri,System.String)">
            <summary>
            Get Recipient of a Share
            </summary>
            <remarks>
            Retrieve a single Share Recipient identified by the alias id.
            </remarks>
            <param name="parentUrl"></param>
            <param name="id"></param>
            <returns>
            A Share Alias representing a single recipient of the Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.GetItems(System.Uri)">
            <summary>
            Get Items of a Share
            </summary>
            <remarks>
            Retrieve the list of Items (files and folders) in the Send Share.
            </remarks>
            <param name="url"></param>
            <returns>
            A feed of Items of the Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.GetItems(System.Uri,System.String)">
            <summary>
            Get Items of a Send Share
            </summary>
            <remarks>
            Retrieve a single Item in the Send Share
            </remarks>
            <param name="shareUrl"></param>
            <param name="itemid"></param>
            <returns>
            An item in the Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.Thumbnail(System.Uri,System.String,System.Int32,System.Boolean)">
            <summary>
            Get Thumbnail of a Share Item
            </summary>
            <remarks>
            Retrieve a thumbnail link for the specified Item in the Share.
            </remarks>
            <param name="shareUrl"></param>
            <param name="itemid"></param>
            <param name="size"></param>
            <param name="redirect"></param>
            <returns>
            A 302 redirection to the Thumbnail link
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.ProtocolLinks(System.Uri,System.String,ShareFile.Api.Models.PreviewPlatform)">
            <summary>
            Get List of Protocol Links of a Share item
            </summary>
            <param name="shareUrl"></param>
            <param name="itemid"></param>
            <param name="platform"></param>
            <returns>
            A list of protocol links depending on the input parameter 'platform', 404 (Not Found) if not supported by the item
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.Download(System.Uri,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Downloads Share Items
            </summary>
            <remarks>
            Downloads items from the Share. The default action will download all Items in the Share.
            If a Share has a single item, the download attachment name
            will use the item name. Otherwise, the download will contain a ZIP archive containing all
            files and folders in the share, named Files.zip.To download Shares that require authentication, make sure this request is authenticated. To download
            shares that require require user information, provide the Name, Email and Company parameters in the URI
            query. Anyone can download files from anonymous shares.You can also download individual Items in the Share. Use the Share(id)/Items(id)/Download action. The
            item ID must be a top-level item in the Share - i.e., you cannot download or address files contained inside
            a shared folder.
            </remarks>
            <param name="shareUrl"></param>
            <param name="itemId"></param>
            <param name="Name"></param>
            <param name="Email"></param>
            <param name="Company"></param>
            <param name="redirect"></param>
            <returns>
            Redirects the caller (302) to the download address for the share contents.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.DownloadWithAlias(System.Uri,System.String,System.String,System.Boolean)">
            <summary>
            Download Items from a Share for a Recipient
            </summary>
            <example>
            GET https://account.sf-api.com/sf/v3/Shares(shareid)/Recipients(aliasid)/DownloadWithAlias?id=itemid
            GET https://account.sf-api.com/sf/v3/Shares(shareid)/Recipients(aliasid)/DownloadWithAlias(itemid)
            </example>
            <remarks>
            Downloads items from the Share. The default action will download all Items in the Share.
            If a Share has a single item, the download attachment name
            will use the item name. Otherwise, the download will contain a ZIP archive containing all
            files and folders in the share, named Files.zip.To download Shares that require user informaion ( Email, First Name, Last Name and Company), make sure
            to create an Recipient (alias)To download Shares that require authentication, make sure this request is authenticated.
            Anyone can download files from anonymous shares.You can also download individual Items in the Share. Use the Shares(id)/Recipients(aliasid)/Download action. The
            item ID must be a top-level item in the Share - i.e., you cannot download or address files contained inside
            a shared folder.
            </remarks>
            <param name="shareUrl"></param>
            <param name="aliasid"></param>
            <param name="itemId"></param>
            <param name="redirect"></param>
            <returns>
            Redirects the caller (302) to the download address for the share contents.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.BulkDownload(System.Uri,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Download Multiple Items from a Share for a Recipient
            </summary>
            <example>
            ["id1","id2",...]
            </example>
            <remarks>
            Download Multiple Items from a Share for a Recipient. The download will contain a ZIP archive containing all
            files and folders in the share, named Files.zip.To download Shares that require user informaion ( Email, First Name, Last Name and Company), make sure
            to create an Recipient (alias) and pass in the alaisId.To download Shares that require authentication, make sure this request is authenticated.
            Anyone can download files from anonymous shares.
            </remarks>
            <param name="shareUrl"></param>
            <param name="aliasid"></param>
            <param name="ids"></param>
            <param name="redirect"></param>
            <returns>
            Redirects the caller (302) to the download address for the share contents.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.Create(ShareFile.Api.Models.Share,System.Boolean)">
            <summary>
            Create Share
            </summary>
            <example>
            {
            "ShareType":"Send",
            "Title":"Sample Send Share",
            "Items": [ { "Id":"itemid" }, {...} ],
            "Recipients":[ { "User": { "Id":"userid" } }, { "User": { "Email": "user@email" } } ],
            "ExpirationDate": "2013-07-23",
            "RequireLogin": false,
            "RequireUserInfo": false,
            "MaxDownloads": -1,
            "UsesStreamIDs": false
            }
            {
            "ShareType":"Request",
            "Title":"Sample Request Share",
            "Recipients":[ { "User": { "Id":"userid" } }, { "User": { "Email": "user@email" } } ],
            "Parent": { "Id":"folderid" },
            "ExpirationDate": "2013-07-23",
            "RequireLogin": false,
            "RequireUserInfo": false,
            "TrackUntilDate": "2013-07-23",
            "SendFrequency": -1,
            "SendInterval": -1
            }
            </example>
            <remarks>
            Creates a new Send or Request Share.
            Expiration date:
            - if not specified the default is 30 days
            - "9999-12-31" disables share expiration.
            To use stream IDs as item IDs UsesStreamIDs needs to be set to true, and all the IDs in Items need to be specified
            as stream IDs.
            </remarks>
            <param name="share"></param>
            <param name="notify"></param>
            <returns>
            The new Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.Update(System.Uri,ShareFile.Api.Models.Share)">
            <summary>
            Update Share
            </summary>
            <example>
            {
            "Title": "New Title",
            "ExpirationDate": "2013-07-23",
            "RequireLogin": false,
            "Items": [ { "Id":"itemid" }, {...} ],
            }
            </example>
            <remarks>
            Modifies an existing Share. If Items are specified they are added to the share.
            </remarks>
            <param name="url"></param>
            <param name="share"></param>
            <returns>
            The modified Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.Delete(System.Uri)">
            <summary>
            Delete Share
            </summary>
            <remarks>
            Removes an existing Share
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.CreateAlias(System.Uri,System.String,System.Boolean)">
            <summary>
            Create Share Alias
            </summary>
            <remarks>
            Creates a share alias for the specified share ID and user email. If a user with the given email address does not
            exist it is created first.
            For shares requiring login an activation email is sent to the created user. If 'notify' is enabled, the user activation is
            included in the share notification email.
            </remarks>
            <param name="url"></param>
            <param name="email"></param>
            <param name="notify"></param>
            <returns>
            Share with the AliasID property set to the created alias ID
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.CreateSend(ShareFile.Api.Models.ShareSendParams)">
            <summary>
            Deliver Send a File Email
            </summary>
            <remarks>
            Sends an Email to the specified list of addresses, containing a link to the specified Items.
            The default number of expiration days is 30. -1 disables share expiration.
            </remarks>
            <param name="parameters"></param>
            <returns>
            The new Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.CreateRequest(ShareFile.Api.Models.ShareRequestParams)">
            <summary>
            Deliver Request a File Email
            </summary>
            <remarks>
            Sends an Email to the specified list of addresses, containing a link to files upload.
            The default number of expiration days is 30. -1 disables share expiration.
            </remarks>
            <param name="parameters"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.Resend(ShareFile.Api.Models.ShareResendParams)">
            <summary>
            Deliver an existing share link to one or more recipients
            </summary>
            <remarks>
            Sends an Email to the specified list of addresses, containing a link to a download or an upload.
            </remarks>
            <param name="parameters"></param>
            <returns>
            The updated Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.Upload(System.Uri,ShareFile.Api.Models.UploadMethod,System.Boolean,System.String,System.Int64,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            Upload File to Request Share
            </summary>
            <example>
            POST https://account.sf-api.com/sf/v3/Shares(id)/Upload2
            {
            "Method":"Method",
            "Raw": false,
            "FileName":"FileName"
            "FileLength": length
            }
            </example>
            <remarks>
            Prepares the links for uploading files to the target Share.
            This method returns an Upload Specification object. The fields are
            populated based on the upload method, provider, and resume parameters passed to the
            upload call.
            The Method determines how the URLs must be called.
            
            Standard uploads use a single HTTP POST message to the ChunkUri address provided in
            the response. All other fields will be empty. Standard uploads do not support Resume.
            
            Streamed uploads use multiple HTTP POST calls to the ChunkUri address. The client must
            append the parameters index, offset and hash to the end of the ChunkUri address. Index
            is a sequential number representing the data block (zero-based); Offset represents the
            byte offset for the block; and hash contains the MD5 hash of the block. The last HTTP
            POST must also contain finish=true parameter.
            
            Threaded uploads use multiple HTTP POST calls to ChunkUri, and can have a number of
            threads issuing blocks in parallel. Clients must append index, offset and hash to
            the end of ChunkUri, as explained in Streamed. After all chunks were sent, the client
            must call the FinishUri provided in this spec.
            
            For all uploaders, the contents of the POST Body can either be "raw", if the "Raw" parameter
            was provided to the Uploader, or use MIME multi-part form encoding otherwise. Raw uploads
            simply put the block content in the POST body - Content-Length specifies the size. Multi-part
            form encoding has to pass the File as a Form parameter named "File1".
            
            For streamed and threaded, if Resume options were provided to the Upload call, then the
            fields IsResume, ResumeIndex, ResumeOffset and ResumeFileHash MAY be populated. If they are,
            it indicates that the server has identified a partial upload with that specification, and is
            ready to resume on the provided parameters. The clients can then verify the ResumeFileHash to
            ensure the file has not been modified; and continue issuing ChunkUri calls from the ResumeIndex
            ResumeOffset parameters. If the client decides to restart, it should simply ignore the resume
            parameters and send the blocks from Index 0.
            
            For all uploaders: the result code for the HTTP POST calls to Chunk and Finish Uri can either
            be a 401 - indicating authentication is required; 4xx/5xx indicating some kind of error; or
            200 with a Content Body of format 'ERROR:message'. Successful calls will return either a 200
            response with no Body, or with Body of format 'OK'.
            </remarks>
            <param name="url"></param>
            <param name="method"></param>
            <param name="raw"></param>
            <param name="fileName"></param>
            <param name="fileSize"></param>
            <param name="batchId"></param>
            <param name="batchLast"></param>
            <param name="canResume"></param>
            <param name="startOver"></param>
            <param name="unzip"></param>
            <param name="tool"></param>
            <param name="overwrite"></param>
            <param name="title"></param>
            <param name="details"></param>
            <param name="isSend"></param>
            <param name="sendGuid"></param>
            <param name="opid"></param>
            <param name="threadCount"></param>
            <param name="responseFormat"></param>
            <param name="notify"></param>
            <returns>
            an Upload Specification element, containing the links for uploading, and the parameters for resume.
            The caller must know the protocol for sending the prepare, chunk and finish URLs returned in the spec; as well as
            negotiate the resume upload.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.GetRedirection(System.Uri)">
            <summary>
            Get Redirection endpoint Information
            </summary>
            <remarks>
            Returns the redirection endpoint for this Share.
            </remarks>
            <param name="url"></param>
            <returns>
            The Redirection endpoint Information
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.GetInbox(System.String,ShareFile.Api.Models.ShareType,System.Boolean)">
            <summary>
            Get Inbox for Recipient
            </summary>
            <remarks>
            Retrieve all outstanding Shares in the inbox.User identifier
            </remarks>
            <returns>
            List of Shares created by the authenticated user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.Message(System.Uri,System.String)">
            <summary>
            Get Sent Message Content by Share
            </summary>
            <remarks>
            Returns sent message content.
            </remarks>
            <param name="shareUrl"></param>
            <param name="aliasId"></param>
            <returns>
            Sent Message Content
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.Get">
            <summary>
            Get List of Shares
            </summary>
            <remarks>
            Retrieve all outstanding Shares of the authenticated user
            </remarks>
            <returns>
            List of Shares created by the authenticated user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.Get(System.Uri)">
            <summary>
            Get Share
            </summary>
            <remarks>
            Retrieve a single Share entity. If the Share allows anonymous access, then this method will not
            require authentication.
            </remarks>
            <param name="url"></param>
            <returns>
            A single Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.GetRecipients(System.Uri)">
            <summary>
            Get Recipients of a Share
            </summary>
            <remarks>
            Retrieve the list of Recipients in the share. Recipients represent the target users of the Share, containing
            access information, such as number of times that user downloaded files from the share. Each Recipient is
            identified by an Alias, which is an unique ID given to each user - allowing tracking of downloads for
            non-authenticated users.
            </remarks>
            <param name="url"></param>
            <returns>
            A feed of Share Aliases representing recipients of the Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.GetRecipients(System.Uri,System.String)">
            <summary>
            Get Recipient of a Share
            </summary>
            <remarks>
            Retrieve a single Share Recipient identified by the alias id.
            </remarks>
            <param name="parentUrl"></param>
            <param name="id"></param>
            <returns>
            A Share Alias representing a single recipient of the Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.GetItems(System.Uri)">
            <summary>
            Get Items of a Share
            </summary>
            <remarks>
            Retrieve the list of Items (files and folders) in the Send Share.
            </remarks>
            <param name="url"></param>
            <returns>
            A feed of Items of the Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.GetItems(System.Uri,System.String)">
            <summary>
            Get Items of a Send Share
            </summary>
            <remarks>
            Retrieve a single Item in the Send Share
            </remarks>
            <param name="shareUrl"></param>
            <param name="itemid"></param>
            <returns>
            An item in the Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.Thumbnail(System.Uri,System.String,System.Int32,System.Boolean)">
            <summary>
            Get Thumbnail of a Share Item
            </summary>
            <remarks>
            Retrieve a thumbnail link for the specified Item in the Share.
            </remarks>
            <param name="shareUrl"></param>
            <param name="itemid"></param>
            <param name="size"></param>
            <param name="redirect"></param>
            <returns>
            A 302 redirection to the Thumbnail link
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.ProtocolLinks(System.Uri,System.String,ShareFile.Api.Models.PreviewPlatform)">
            <summary>
            Get List of Protocol Links of a Share item
            </summary>
            <param name="shareUrl"></param>
            <param name="itemid"></param>
            <param name="platform"></param>
            <returns>
            A list of protocol links depending on the input parameter 'platform', 404 (Not Found) if not supported by the item
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.Download(System.Uri,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Downloads Share Items
            </summary>
            <remarks>
            Downloads items from the Share. The default action will download all Items in the Share.
            If a Share has a single item, the download attachment name
            will use the item name. Otherwise, the download will contain a ZIP archive containing all
            files and folders in the share, named Files.zip.To download Shares that require authentication, make sure this request is authenticated. To download
            shares that require require user information, provide the Name, Email and Company parameters in the URI
            query. Anyone can download files from anonymous shares.You can also download individual Items in the Share. Use the Share(id)/Items(id)/Download action. The
            item ID must be a top-level item in the Share - i.e., you cannot download or address files contained inside
            a shared folder.
            </remarks>
            <param name="shareUrl"></param>
            <param name="itemId"></param>
            <param name="Name"></param>
            <param name="Email"></param>
            <param name="Company"></param>
            <param name="redirect"></param>
            <returns>
            Redirects the caller (302) to the download address for the share contents.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.DownloadWithAlias(System.Uri,System.String,System.String,System.Boolean)">
            <summary>
            Download Items from a Share for a Recipient
            </summary>
            <example>
            GET https://account.sf-api.com/sf/v3/Shares(shareid)/Recipients(aliasid)/DownloadWithAlias?id=itemid
            GET https://account.sf-api.com/sf/v3/Shares(shareid)/Recipients(aliasid)/DownloadWithAlias(itemid)
            </example>
            <remarks>
            Downloads items from the Share. The default action will download all Items in the Share.
            If a Share has a single item, the download attachment name
            will use the item name. Otherwise, the download will contain a ZIP archive containing all
            files and folders in the share, named Files.zip.To download Shares that require user informaion ( Email, First Name, Last Name and Company), make sure
            to create an Recipient (alias)To download Shares that require authentication, make sure this request is authenticated.
            Anyone can download files from anonymous shares.You can also download individual Items in the Share. Use the Shares(id)/Recipients(aliasid)/Download action. The
            item ID must be a top-level item in the Share - i.e., you cannot download or address files contained inside
            a shared folder.
            </remarks>
            <param name="shareUrl"></param>
            <param name="aliasid"></param>
            <param name="itemId"></param>
            <param name="redirect"></param>
            <returns>
            Redirects the caller (302) to the download address for the share contents.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.BulkDownload(System.Uri,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Download Multiple Items from a Share for a Recipient
            </summary>
            <example>
            ["id1","id2",...]
            </example>
            <remarks>
            Download Multiple Items from a Share for a Recipient. The download will contain a ZIP archive containing all
            files and folders in the share, named Files.zip.To download Shares that require user informaion ( Email, First Name, Last Name and Company), make sure
            to create an Recipient (alias) and pass in the alaisId.To download Shares that require authentication, make sure this request is authenticated.
            Anyone can download files from anonymous shares.
            </remarks>
            <param name="shareUrl"></param>
            <param name="aliasid"></param>
            <param name="ids"></param>
            <param name="redirect"></param>
            <returns>
            Redirects the caller (302) to the download address for the share contents.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.Create(ShareFile.Api.Models.Share,System.Boolean)">
            <summary>
            Create Share
            </summary>
            <example>
            {
            "ShareType":"Send",
            "Title":"Sample Send Share",
            "Items": [ { "Id":"itemid" }, {...} ],
            "Recipients":[ { "User": { "Id":"userid" } }, { "User": { "Email": "user@email" } } ],
            "ExpirationDate": "2013-07-23",
            "RequireLogin": false,
            "RequireUserInfo": false,
            "MaxDownloads": -1,
            "UsesStreamIDs": false
            }
            {
            "ShareType":"Request",
            "Title":"Sample Request Share",
            "Recipients":[ { "User": { "Id":"userid" } }, { "User": { "Email": "user@email" } } ],
            "Parent": { "Id":"folderid" },
            "ExpirationDate": "2013-07-23",
            "RequireLogin": false,
            "RequireUserInfo": false,
            "TrackUntilDate": "2013-07-23",
            "SendFrequency": -1,
            "SendInterval": -1
            }
            </example>
            <remarks>
            Creates a new Send or Request Share.
            Expiration date:
            - if not specified the default is 30 days
            - "9999-12-31" disables share expiration.
            To use stream IDs as item IDs UsesStreamIDs needs to be set to true, and all the IDs in Items need to be specified
            as stream IDs.
            </remarks>
            <param name="share"></param>
            <param name="notify"></param>
            <returns>
            The new Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.Update(System.Uri,ShareFile.Api.Models.Share)">
            <summary>
            Update Share
            </summary>
            <example>
            {
            "Title": "New Title",
            "ExpirationDate": "2013-07-23",
            "RequireLogin": false,
            "Items": [ { "Id":"itemid" }, {...} ],
            }
            </example>
            <remarks>
            Modifies an existing Share. If Items are specified they are added to the share.
            </remarks>
            <param name="url"></param>
            <param name="share"></param>
            <returns>
            The modified Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.Delete(System.Uri)">
            <summary>
            Delete Share
            </summary>
            <remarks>
            Removes an existing Share
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.CreateAlias(System.Uri,System.String,System.Boolean)">
            <summary>
            Create Share Alias
            </summary>
            <remarks>
            Creates a share alias for the specified share ID and user email. If a user with the given email address does not
            exist it is created first.
            For shares requiring login an activation email is sent to the created user. If 'notify' is enabled, the user activation is
            included in the share notification email.
            </remarks>
            <param name="url"></param>
            <param name="email"></param>
            <param name="notify"></param>
            <returns>
            Share with the AliasID property set to the created alias ID
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.CreateSend(ShareFile.Api.Models.ShareSendParams)">
            <summary>
            Deliver Send a File Email
            </summary>
            <remarks>
            Sends an Email to the specified list of addresses, containing a link to the specified Items.
            The default number of expiration days is 30. -1 disables share expiration.
            </remarks>
            <param name="parameters"></param>
            <returns>
            The new Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.CreateRequest(ShareFile.Api.Models.ShareRequestParams)">
            <summary>
            Deliver Request a File Email
            </summary>
            <remarks>
            Sends an Email to the specified list of addresses, containing a link to files upload.
            The default number of expiration days is 30. -1 disables share expiration.
            </remarks>
            <param name="parameters"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.Resend(ShareFile.Api.Models.ShareResendParams)">
            <summary>
            Deliver an existing share link to one or more recipients
            </summary>
            <remarks>
            Sends an Email to the specified list of addresses, containing a link to a download or an upload.
            </remarks>
            <param name="parameters"></param>
            <returns>
            The updated Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.Upload(System.Uri,ShareFile.Api.Models.UploadMethod,System.Boolean,System.String,System.Int64,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            Upload File to Request Share
            </summary>
            <example>
            POST https://account.sf-api.com/sf/v3/Shares(id)/Upload2
            {
            "Method":"Method",
            "Raw": false,
            "FileName":"FileName"
            "FileLength": length
            }
            </example>
            <remarks>
            Prepares the links for uploading files to the target Share.
            This method returns an Upload Specification object. The fields are
            populated based on the upload method, provider, and resume parameters passed to the
            upload call.
            The Method determines how the URLs must be called.
            
            Standard uploads use a single HTTP POST message to the ChunkUri address provided in
            the response. All other fields will be empty. Standard uploads do not support Resume.
            
            Streamed uploads use multiple HTTP POST calls to the ChunkUri address. The client must
            append the parameters index, offset and hash to the end of the ChunkUri address. Index
            is a sequential number representing the data block (zero-based); Offset represents the
            byte offset for the block; and hash contains the MD5 hash of the block. The last HTTP
            POST must also contain finish=true parameter.
            
            Threaded uploads use multiple HTTP POST calls to ChunkUri, and can have a number of
            threads issuing blocks in parallel. Clients must append index, offset and hash to
            the end of ChunkUri, as explained in Streamed. After all chunks were sent, the client
            must call the FinishUri provided in this spec.
            
            For all uploaders, the contents of the POST Body can either be "raw", if the "Raw" parameter
            was provided to the Uploader, or use MIME multi-part form encoding otherwise. Raw uploads
            simply put the block content in the POST body - Content-Length specifies the size. Multi-part
            form encoding has to pass the File as a Form parameter named "File1".
            
            For streamed and threaded, if Resume options were provided to the Upload call, then the
            fields IsResume, ResumeIndex, ResumeOffset and ResumeFileHash MAY be populated. If they are,
            it indicates that the server has identified a partial upload with that specification, and is
            ready to resume on the provided parameters. The clients can then verify the ResumeFileHash to
            ensure the file has not been modified; and continue issuing ChunkUri calls from the ResumeIndex
            ResumeOffset parameters. If the client decides to restart, it should simply ignore the resume
            parameters and send the blocks from Index 0.
            
            For all uploaders: the result code for the HTTP POST calls to Chunk and Finish Uri can either
            be a 401 - indicating authentication is required; 4xx/5xx indicating some kind of error; or
            200 with a Content Body of format 'ERROR:message'. Successful calls will return either a 200
            response with no Body, or with Body of format 'OK'.
            </remarks>
            <param name="url"></param>
            <param name="method"></param>
            <param name="raw"></param>
            <param name="fileName"></param>
            <param name="fileSize"></param>
            <param name="batchId"></param>
            <param name="batchLast"></param>
            <param name="canResume"></param>
            <param name="startOver"></param>
            <param name="unzip"></param>
            <param name="tool"></param>
            <param name="overwrite"></param>
            <param name="title"></param>
            <param name="details"></param>
            <param name="isSend"></param>
            <param name="sendGuid"></param>
            <param name="opid"></param>
            <param name="threadCount"></param>
            <param name="responseFormat"></param>
            <param name="notify"></param>
            <returns>
            an Upload Specification element, containing the links for uploading, and the parameters for resume.
            The caller must know the protocol for sending the prepare, chunk and finish URLs returned in the spec; as well as
            negotiate the resume upload.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.GetRedirection(System.Uri)">
            <summary>
            Get Redirection endpoint Information
            </summary>
            <remarks>
            Returns the redirection endpoint for this Share.
            </remarks>
            <param name="url"></param>
            <returns>
            The Redirection endpoint Information
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.GetInbox(System.String,ShareFile.Api.Models.ShareType,System.Boolean)">
            <summary>
            Get Inbox for Recipient
            </summary>
            <remarks>
            Retrieve all outstanding Shares in the inbox.User identifier
            </remarks>
            <returns>
            List of Shares created by the authenticated user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.Message(System.Uri,System.String)">
            <summary>
            Get Sent Message Content by Share
            </summary>
            <remarks>
            Returns sent message content.
            </remarks>
            <param name="shareUrl"></param>
            <param name="aliasId"></param>
            <returns>
            Sent Message Content
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IStorageCentersEntity.Get(System.Uri)">
            <summary>
            Get Storage Center
            </summary>
            <param name="url"></param>
            <returns>
            A single Storage Center
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IStorageCentersEntity.Update(System.Uri,ShareFile.Api.Models.StorageCenter)">
            <summary>
            Patch Storage Center
            </summary>
            <example>
            {
            "ExternalAddress":"https://server/",
            "Version":"4.12.20",
            "HostName":"hostname" }
            </example>
            <param name="url"></param>
            <param name="sc"></param>
            <returns>
            Modified Storage Center
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IStorageCentersEntity.Delete(System.Uri)">
            <summary>
            Delete Storage Center
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IStorageCentersEntity.GetByZone(System.Uri)">
            <summary>
            Get List of StorageCenters from Zone
            </summary>
            <remarks>
            Lists Storage Centers of a given Zone
            </remarks>
            <param name="url"></param>
            <returns>
            A list of Storage Centers associated with the provided zone
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IStorageCentersEntity.CreateByZone(System.Uri,ShareFile.Api.Models.StorageCenter)">
            <summary>
            Create StorageCenter
            </summary>
            <example>
            {
            "ExternalAddress":"https://server/",
            "Version":"4.12.20",
            "HostName":"hostname"
            }
            </example>
            <remarks>
            Creates a new Storage Center associated with a specific zone
            </remarks>
            <param name="url"></param>
            <param name="storageCenter"></param>
            <returns>
            The new storage center
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IStorageCentersEntity.UpdateByZone(System.Uri,System.String,ShareFile.Api.Models.StorageCenter)">
            <summary>
            Update StorageCenter
            </summary>
            <example>
            {
            "ExternalAddress":"https://server/",
            "Version":"4.12.20",
            "HostName":"hostname"
            }
            </example>
            <remarks>
            Updates an existing Storage Center
            </remarks>
            <param name="zUrl"></param>
            <param name="scid"></param>
            <param name="storageCenter"></param>
            <returns>
            the modified storage center
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IStorageCentersEntity.DeleteByZone(System.Uri,System.String)">
            <summary>
            Delete StorageCenter
            </summary>
            <remarks>
            Removes an existing storage center
            </remarks>
            <param name="zUrl"></param>
            <param name="scid"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IStorageCentersEntity.GetMetadata(System.Uri,System.String)">
            <summary>
            Get StorageCenter Metadata
            </summary>
            <remarks>
            Gets metadata associated with the specified storage center
            </remarks>
            <param name="zUrl"></param>
            <param name="scid"></param>
            <returns>
            the storage center metadata feed
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IStorageCentersEntity.CreateMetadata(System.Uri,System.String,System.Collections.Generic.IEnumerable{ShareFile.Api.Models.Metadata})">
            <summary>
            Create or update StorageCenter Metadata
            </summary>
            <example>
            [
            {"Name":"metadataName1", "Value":"metadataValue1", "IsPublic":"true"},
            {"Name":"metadataName2", "Value":"metadataValue2", "IsPublic":"false"},
            ...
            ]
            </example>
            <remarks>
            Creates or updates Metadata entries associated with the specified storage center
            </remarks>
            <param name="zUrl"></param>
            <param name="scid"></param>
            <param name="metadata"></param>
            <returns>
            the storage center metadata feed
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IStorageCentersEntity.DeleteMetadata(System.Uri,System.String,System.String)">
            <summary>
            Delete StorageCenter Metadata
            </summary>
            <remarks>
            Delete the Metadata entry associated with the specified storage center
            </remarks>
            <param name="zUrl"></param>
            <param name="scid"></param>
            <param name="name"></param>
            <returns>
            no data on success
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.StorageCentersEntity.Get(System.Uri)">
            <summary>
            Get Storage Center
            </summary>
            <param name="url"></param>
            <returns>
            A single Storage Center
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.StorageCentersEntity.Update(System.Uri,ShareFile.Api.Models.StorageCenter)">
            <summary>
            Patch Storage Center
            </summary>
            <example>
            {
            "ExternalAddress":"https://server/",
            "Version":"4.12.20",
            "HostName":"hostname" }
            </example>
            <param name="url"></param>
            <param name="sc"></param>
            <returns>
            Modified Storage Center
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.StorageCentersEntity.Delete(System.Uri)">
            <summary>
            Delete Storage Center
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.StorageCentersEntity.GetByZone(System.Uri)">
            <summary>
            Get List of StorageCenters from Zone
            </summary>
            <remarks>
            Lists Storage Centers of a given Zone
            </remarks>
            <param name="url"></param>
            <returns>
            A list of Storage Centers associated with the provided zone
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.StorageCentersEntity.CreateByZone(System.Uri,ShareFile.Api.Models.StorageCenter)">
            <summary>
            Create StorageCenter
            </summary>
            <example>
            {
            "ExternalAddress":"https://server/",
            "Version":"4.12.20",
            "HostName":"hostname"
            }
            </example>
            <remarks>
            Creates a new Storage Center associated with a specific zone
            </remarks>
            <param name="url"></param>
            <param name="storageCenter"></param>
            <returns>
            The new storage center
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.StorageCentersEntity.UpdateByZone(System.Uri,System.String,ShareFile.Api.Models.StorageCenter)">
            <summary>
            Update StorageCenter
            </summary>
            <example>
            {
            "ExternalAddress":"https://server/",
            "Version":"4.12.20",
            "HostName":"hostname"
            }
            </example>
            <remarks>
            Updates an existing Storage Center
            </remarks>
            <param name="zUrl"></param>
            <param name="scid"></param>
            <param name="storageCenter"></param>
            <returns>
            the modified storage center
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.StorageCentersEntity.DeleteByZone(System.Uri,System.String)">
            <summary>
            Delete StorageCenter
            </summary>
            <remarks>
            Removes an existing storage center
            </remarks>
            <param name="zUrl"></param>
            <param name="scid"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.StorageCentersEntity.GetMetadata(System.Uri,System.String)">
            <summary>
            Get StorageCenter Metadata
            </summary>
            <remarks>
            Gets metadata associated with the specified storage center
            </remarks>
            <param name="zUrl"></param>
            <param name="scid"></param>
            <returns>
            the storage center metadata feed
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.StorageCentersEntity.CreateMetadata(System.Uri,System.String,System.Collections.Generic.IEnumerable{ShareFile.Api.Models.Metadata})">
            <summary>
            Create or update StorageCenter Metadata
            </summary>
            <example>
            [
            {"Name":"metadataName1", "Value":"metadataValue1", "IsPublic":"true"},
            {"Name":"metadataName2", "Value":"metadataValue2", "IsPublic":"false"},
            ...
            ]
            </example>
            <remarks>
            Creates or updates Metadata entries associated with the specified storage center
            </remarks>
            <param name="zUrl"></param>
            <param name="scid"></param>
            <param name="metadata"></param>
            <returns>
            the storage center metadata feed
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.StorageCentersEntity.DeleteMetadata(System.Uri,System.String,System.String)">
            <summary>
            Delete StorageCenter Metadata
            </summary>
            <remarks>
            Delete the Metadata entry associated with the specified storage center
            </remarks>
            <param name="zUrl"></param>
            <param name="scid"></param>
            <param name="name"></param>
            <returns>
            no data on success
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.Get(System.String,System.String)">
            <summary>
            Get User
            </summary>
            <remarks>
            Retrieve a single user, by ID or email, or the currently authenticated user.
            </remarks>
            <param name="id"></param>
            <param name="emailAddress"></param>
            <returns>
            the requested User object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.Create(ShareFile.Api.Models.User,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create Client User
            </summary>
            <example>
            {
            "Email":"user.one@domain.com",
            "FirstName":"Name",
            "LastName":"Last Name",
            "Company":"Company",
            "Password":"password",
            "Preferences":
            {
            "CanResetPassword":true,
            "CanViewMySettings":true
            },
            "DefaultZone":
            {
            "Id":"zoneid"
            }
            }
            </example>
            <remarks>
            Creates a new Client User and associates it to an Account
            The following parameters from the input object are used: Email, FirstName, LastName, Company,
            DefaultZone, Password, Preferences.CanResetPassword and Preferences.CanViewMySettingsOther parameters are ignored
            </remarks>
            <param name="user"></param>
            <param name="pushCreatorDefaultSettings"></param>
            <param name="addshared"></param>
            <param name="notify"></param>
            <param name="ifNecessary"></param>
            <param name="addPersonal"></param>
            <returns>
            The new user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.CreateAccountUser(ShareFile.Api.Models.AccountUser,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create Employee
            </summary>
            <example>
            {
            "Email":"user.one@domain.com",
            "FirstName":"Name",
            "LastName":"Last Name",
            "Company":"Company",
            "Password":"password",
            "StorageQuotaLimitGB":50,
            "Preferences":
            {
            "CanResetPassword":true,
            "CanViewMySettings":true
            },
            "DefaultZone":
            {
            "Id":"zoneid"
            },
            "IsAdministrator": false,
            "CanCreateFolders": false,
            "CanUseFileBox": true,
            "CanManageUsers": false,
            "Roles": [
            "CanChangePassword", "CanManageMySettings",
            "CanUseFileBox, "CanManageUsers, "CanCreateFolders, "CanUseDropBox, "CanSelectFolderZone,
            "AdminAccountPolicies", "AdminBilling", "AdminBranding", "AdminChangePlan", "AdminFileBoxAccess",
            "AdminManageEmployees", "AdminRemoteUploadForms", "AdminReporting", "AdminSharedDistGroups",
            "AdminSharedAddressBook", "AdminViewReceipts", "AdminDelegate", "AdminManageFolderTemplates",
            "AdminEmailMessages", "AdminSSO", "AdminSuperGroup", "AdminZones", "AdminCreateSharedGroups", "AdminConnectors"
            ]
            }
            </example>
            <remarks>
            Creates a new Employee User (AccountUser) and associates it to an Account
            The following parameters from the input object are used: Email, FirstName, LastName, Company,
            DefaultZone, Password, IsEmployee, IsAdministrator, CanCreateFolders, CanUseFileBox, CanManageUsers,
            Preferences.CanResetPassword and Preferences.CanViewMySettings.
            Other parameters are ignoredStorageQuotaLimitGB parameter is optional. If not specified or equal to -1 the account default storage quota value will be set for the User.
            </remarks>
            <param name="user"></param>
            <param name="pushCreatorDefaultSettings"></param>
            <param name="addshared"></param>
            <param name="notify"></param>
            <param name="ifNecessary"></param>
            <returns>
            The new employee user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.Update(System.Uri,ShareFile.Api.Models.User)">
            <summary>
            Update User
            </summary>
            <example>
            {
            "FirstName":"FirstName",
            "LastName":"LastName",
            "Company":"Company",
            "Email":"user@domain.com",
            "Security":
            {
            "IsDisabled":false
            }
            "DefaultZone":
            {
            "Id":"newzoneid"
            }
            }
            </example>
            <remarks>
            Modifies an existing user object
            The following parameters can be modified through this call: FirstName, LastName, Company,
            Email, IsDisabled, DefaultZone Id
            </remarks>
            <param name="url"></param>
            <param name="user"></param>
            <returns>
            a modified user record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.UpdateRoles(System.Uri,ShareFile.Api.Models.User)">
            <summary>
            Add Roles
            </summary>
            <example>
            {
            "Roles" : [ "CanManageUsers", "CanSelectFolderZone" ]
            }
            </example>
            <remarks>
            Modifies an existing user object to ADD a new role
            The following roles can be added to the user through this call (depending on User type):
            CanCreateFolders,
            CanSelectFolderZone,
            CanUseFileBox,
            CanManageUsers,
            AdminSharedAddressBook,
            CanChangePassword,
            CanManageMySettings
            </remarks>
            <param name="parentUrl"></param>
            <param name="user"></param>
            <returns>
            a modified user record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.PatchRoles(System.Uri,ShareFile.Api.Models.User)">
            <summary>
            Set Roles
            </summary>
            <example>
            {
            "Roles" : [ "CanManageUsers", "CanSelectFolderZone" ]
            }
            </example>
            <remarks>
            Sets the roles for a user (roles not provided will be disabled.)
            The following roles can be set to the user through this call (depending on User type):
            CanCreateFolders,
            CanSelectFolderZone,
            CanUseFileBox,
            CanManageUsers,
            AdminSharedAddressBook,
            CanChangePassword,
            CanManageMySettings
            </remarks>
            <param name="parentUrl"></param>
            <param name="user"></param>
            <returns>
            a modified user record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.UpdateAccountUser(System.String,ShareFile.Api.Models.AccountUser)">
            <summary>
            Update Employee or Promote Customer
            </summary>
            <example>
            {
            "FirstName":"FirstName",
            "LastName":"LastName",
            "Company":"Company",
            "Email":"user@domain.com",
            "StorageQuotaLimitGB":100,
            "Security":
            {
            "IsDisabled":false
            }
            "DefaultZone":
            {
            "Id":"newzoneid"
            }
            }
            </example>
            <remarks>
            Modifies an existing user object
            The following parameters can be modified through this call: FirstName, LastName, Company,
            Email, IsEmployee, IsDisabled, DefaultZone Id, StorageQuotaLimitGB.During a promotion (the user id points to Customer), the following parameters can be
            modified: CanCreateFolders, CanUseFileBox, CanManageUsers. StorageQuotaLimitGB equal to -1 sets the user quota to the account default storage quota value.
            </remarks>
            <param name="id"></param>
            <param name="user"></param>
            <returns>
            a modified user record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.GetHomeFolder(System.Uri)">
            <summary>
            Get HomeFolder
            </summary>
            <remarks>
            Returns a user's home folder
            </remarks>
            <param name="url"></param>
            <returns>
            A folder record representing the requesting user home folder
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.GetTopFolders(System.Uri)">
            <summary>
            Get User's top Folder
            </summary>
            <param name="url"></param>
            <returns>
            User's Top Folders
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.Box(System.Uri)">
            <summary>
            Get User's FileBox children
            </summary>
            <param name="url"></param>
            <returns>
            User's FileBox children
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.FileBox(System.Uri)">
            <summary>
            Get User's FileBox folder
            </summary>
            <param name="url"></param>
            <returns>
            User's FileBox
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.GetPreferences(System.Uri)">
            <summary>
            Get User Preferences
            </summary>
            <remarks>
            Retrieves the User preferences record - all user-selected prefernces, such as timezone,
            time format, sort preferences, etc.
            </remarks>
            <param name="url"></param>
            <returns>
            the user selected preferences
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.UpdatePreferences(System.Uri,ShareFile.Api.Models.UserPreferences)">
            <summary>
            Update User Preferences
            </summary>
            <example>
            {
            "EnableFlashUpload":"true",
            "EnableJavaUpload":"true"
            .
            .
            .
            }
            </example>
            <param name="parentUrl"></param>
            <param name="preferences"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.GetSecurity(System.Uri)">
            <summary>
            Get User Security
            </summary>
            <remarks>
            Retrieve the user security record - current state of the user regarding
            security and password settings.
            </remarks>
            <param name="url"></param>
            <returns>
            the user security status
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.ResetPassword(System.Uri,ShareFile.Api.Models.ODataObject,System.Boolean)">
            <summary>
            Reset Password
            </summary>
            <example>
            {
            "NewPassword":"new password",
            "OldPassword":"old password"
            }
            {
            "NewPassword":"new password",
            "OldPassword":"old password"
            }
            </example>
            <remarks>
            Resets a user password. A user can reset his own password providing the old and new
            passwords. Administrators can issue this call without providing the old password.
            </remarks>
            <param name="url"></param>
            <param name="properties"></param>
            <param name="notify"></param>
            <returns>
            The modified user record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.ForgotPassword(System.String,System.Boolean)">
            <summary>
            Forgot Password
            </summary>
            <remarks>
            Triggers a reset password email
            </remarks>
            <param name="email"></param>
            <param name="resetOnMobile"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.ResendWelcome(System.Uri)">
            <summary>
            Send Welcome Email
            </summary>
            <remarks>
            Resends the 'welcome' email to the given user
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.Delete(System.Uri,System.Boolean)">
            <summary>
            Delete User
            </summary>
            <remarks>
            Removes an user
            </remarks>
            <param name="url"></param>
            <param name="completely"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.GetAllSharedFolders">
            <summary>
            Get List of User Shared Folders
            </summary>
            <remarks>
            Retrieve the list of shared folders the authenticated user has access to
            </remarks>
            <returns>
            A list of Folder objects, representing shared folders of an user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.GetTopFolders">
            <summary>
            Get List of User Shared Folders
            </summary>
            <remarks>
            Retrieve the top-level folders for this user. This method requires the account to be
            in the new UI model of "My Files", "Shared", "Connectors", "Favorites" tab - otherwise
            it will return an empty list (new UX model is the default since May 2013).
            </remarks>
            <returns>
            A list of Folder objects, representing shared folders of an user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.NetworkShareConnectors">
            <summary>
            Get List of User Shared Folders
            </summary>
            <remarks>
            Retrieve the connector folders that are associated with a network share service
            </remarks>
            <returns>
            A list of Folder objects, representing network shared connector folders of an user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.SharepointConnectors">
            <summary>
            Get List of User Shared Folders
            </summary>
            <remarks>
            Retrieve the connector folders that are associated with a sharepoint service
            </remarks>
            <returns>
            A list of Folder objects, representing sharepoint folders of an user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.Confirm(ShareFile.Api.Models.UserConfirmationSettings)">
            <summary>
            Confirm the current user logging in for the first time
            </summary>
            <example>
            {
            "FirstName":"",
            "LastName":"",
            "Company":"",
            "Password":"",
            "DayLightName":"",
            "UTCOffset":"",
            "DateFormat":"",
            "TimeFormat":"",
            "EmailInterval":0
            }
            </example>
            <param name="settings"></param>
            <returns>
            no data on success
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.GetInfo">
            <summary>
            Get Current User Info
            </summary>
            <returns>
            UserInfo
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.DeleteEmailAddress(System.String)">
            <summary>
            Delete the email address from user
            </summary>
            <param name="email"></param>
            <returns>
            User
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.MakePrimary(System.String)">
            <summary>
            Set email address as the primary email address for CURRENT user
            </summary>
            <param name="email"></param>
            <returns>
            User
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.SendConfirmationEmail(System.String)">
            <summary>
            Send notification email address to this email address for verification
            </summary>
            <param name="email"></param>
            <returns>
            User
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.WebAppLink">
            <summary>
            Create a one-time use login Uri for the Web App.
            </summary>
            <returns>
            Redirection populated with link in Uri field
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.InboxMetadata(System.Uri)">
            <summary>
            Get Inbox Metadata
            </summary>
            <remarks>
            Returns metadata of the inbox.User identifier
            </remarks>
            <returns>
            Inbox metadata
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.GetInbox(System.Uri,ShareFile.Api.Models.ShareType,System.Boolean)">
            <summary>
            Get Inbox for Recipient
            </summary>
            <remarks>
            Retrieve all outstanding Shares in the inbox.User identifier
            </remarks>
            <returns>
            List of Shares created by the authenticated user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.SentMessages(System.Uri)">
            <summary>
            Get Sent Messages
            </summary>
            <remarks>
            Returns sent messages for the given user.User identifier
            </remarks>
            <returns>
            Feed of Shares
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.Get(System.String,System.String)">
            <summary>
            Get User
            </summary>
            <remarks>
            Retrieve a single user, by ID or email, or the currently authenticated user.
            </remarks>
            <param name="id"></param>
            <param name="emailAddress"></param>
            <returns>
            the requested User object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.Create(ShareFile.Api.Models.User,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create Client User
            </summary>
            <example>
            {
            "Email":"user.one@domain.com",
            "FirstName":"Name",
            "LastName":"Last Name",
            "Company":"Company",
            "Password":"password",
            "Preferences":
            {
            "CanResetPassword":true,
            "CanViewMySettings":true
            },
            "DefaultZone":
            {
            "Id":"zoneid"
            }
            }
            </example>
            <remarks>
            Creates a new Client User and associates it to an Account
            The following parameters from the input object are used: Email, FirstName, LastName, Company,
            DefaultZone, Password, Preferences.CanResetPassword and Preferences.CanViewMySettingsOther parameters are ignored
            </remarks>
            <param name="user"></param>
            <param name="pushCreatorDefaultSettings"></param>
            <param name="addshared"></param>
            <param name="notify"></param>
            <param name="ifNecessary"></param>
            <param name="addPersonal"></param>
            <returns>
            The new user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.CreateAccountUser(ShareFile.Api.Models.AccountUser,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create Employee
            </summary>
            <example>
            {
            "Email":"user.one@domain.com",
            "FirstName":"Name",
            "LastName":"Last Name",
            "Company":"Company",
            "Password":"password",
            "StorageQuotaLimitGB":50,
            "Preferences":
            {
            "CanResetPassword":true,
            "CanViewMySettings":true
            },
            "DefaultZone":
            {
            "Id":"zoneid"
            },
            "IsAdministrator": false,
            "CanCreateFolders": false,
            "CanUseFileBox": true,
            "CanManageUsers": false,
            "Roles": [
            "CanChangePassword", "CanManageMySettings",
            "CanUseFileBox, "CanManageUsers, "CanCreateFolders, "CanUseDropBox, "CanSelectFolderZone,
            "AdminAccountPolicies", "AdminBilling", "AdminBranding", "AdminChangePlan", "AdminFileBoxAccess",
            "AdminManageEmployees", "AdminRemoteUploadForms", "AdminReporting", "AdminSharedDistGroups",
            "AdminSharedAddressBook", "AdminViewReceipts", "AdminDelegate", "AdminManageFolderTemplates",
            "AdminEmailMessages", "AdminSSO", "AdminSuperGroup", "AdminZones", "AdminCreateSharedGroups", "AdminConnectors"
            ]
            }
            </example>
            <remarks>
            Creates a new Employee User (AccountUser) and associates it to an Account
            The following parameters from the input object are used: Email, FirstName, LastName, Company,
            DefaultZone, Password, IsEmployee, IsAdministrator, CanCreateFolders, CanUseFileBox, CanManageUsers,
            Preferences.CanResetPassword and Preferences.CanViewMySettings.
            Other parameters are ignoredStorageQuotaLimitGB parameter is optional. If not specified or equal to -1 the account default storage quota value will be set for the User.
            </remarks>
            <param name="user"></param>
            <param name="pushCreatorDefaultSettings"></param>
            <param name="addshared"></param>
            <param name="notify"></param>
            <param name="ifNecessary"></param>
            <returns>
            The new employee user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.Update(System.Uri,ShareFile.Api.Models.User)">
            <summary>
            Update User
            </summary>
            <example>
            {
            "FirstName":"FirstName",
            "LastName":"LastName",
            "Company":"Company",
            "Email":"user@domain.com",
            "Security":
            {
            "IsDisabled":false
            }
            "DefaultZone":
            {
            "Id":"newzoneid"
            }
            }
            </example>
            <remarks>
            Modifies an existing user object
            The following parameters can be modified through this call: FirstName, LastName, Company,
            Email, IsDisabled, DefaultZone Id
            </remarks>
            <param name="url"></param>
            <param name="user"></param>
            <returns>
            a modified user record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.UpdateRoles(System.Uri,ShareFile.Api.Models.User)">
            <summary>
            Add Roles
            </summary>
            <example>
            {
            "Roles" : [ "CanManageUsers", "CanSelectFolderZone" ]
            }
            </example>
            <remarks>
            Modifies an existing user object to ADD a new role
            The following roles can be added to the user through this call (depending on User type):
            CanCreateFolders,
            CanSelectFolderZone,
            CanUseFileBox,
            CanManageUsers,
            AdminSharedAddressBook,
            CanChangePassword,
            CanManageMySettings
            </remarks>
            <param name="parentUrl"></param>
            <param name="user"></param>
            <returns>
            a modified user record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.PatchRoles(System.Uri,ShareFile.Api.Models.User)">
            <summary>
            Set Roles
            </summary>
            <example>
            {
            "Roles" : [ "CanManageUsers", "CanSelectFolderZone" ]
            }
            </example>
            <remarks>
            Sets the roles for a user (roles not provided will be disabled.)
            The following roles can be set to the user through this call (depending on User type):
            CanCreateFolders,
            CanSelectFolderZone,
            CanUseFileBox,
            CanManageUsers,
            AdminSharedAddressBook,
            CanChangePassword,
            CanManageMySettings
            </remarks>
            <param name="parentUrl"></param>
            <param name="user"></param>
            <returns>
            a modified user record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.UpdateAccountUser(System.String,ShareFile.Api.Models.AccountUser)">
            <summary>
            Update Employee or Promote Customer
            </summary>
            <example>
            {
            "FirstName":"FirstName",
            "LastName":"LastName",
            "Company":"Company",
            "Email":"user@domain.com",
            "StorageQuotaLimitGB":100,
            "Security":
            {
            "IsDisabled":false
            }
            "DefaultZone":
            {
            "Id":"newzoneid"
            }
            }
            </example>
            <remarks>
            Modifies an existing user object
            The following parameters can be modified through this call: FirstName, LastName, Company,
            Email, IsEmployee, IsDisabled, DefaultZone Id, StorageQuotaLimitGB.During a promotion (the user id points to Customer), the following parameters can be
            modified: CanCreateFolders, CanUseFileBox, CanManageUsers. StorageQuotaLimitGB equal to -1 sets the user quota to the account default storage quota value.
            </remarks>
            <param name="id"></param>
            <param name="user"></param>
            <returns>
            a modified user record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.GetHomeFolder(System.Uri)">
            <summary>
            Get HomeFolder
            </summary>
            <remarks>
            Returns a user's home folder
            </remarks>
            <param name="url"></param>
            <returns>
            A folder record representing the requesting user home folder
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.GetTopFolders(System.Uri)">
            <summary>
            Get User's top Folder
            </summary>
            <param name="url"></param>
            <returns>
            User's Top Folders
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.Box(System.Uri)">
            <summary>
            Get User's FileBox children
            </summary>
            <param name="url"></param>
            <returns>
            User's FileBox children
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.FileBox(System.Uri)">
            <summary>
            Get User's FileBox folder
            </summary>
            <param name="url"></param>
            <returns>
            User's FileBox
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.GetPreferences(System.Uri)">
            <summary>
            Get User Preferences
            </summary>
            <remarks>
            Retrieves the User preferences record - all user-selected prefernces, such as timezone,
            time format, sort preferences, etc.
            </remarks>
            <param name="url"></param>
            <returns>
            the user selected preferences
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.UpdatePreferences(System.Uri,ShareFile.Api.Models.UserPreferences)">
            <summary>
            Update User Preferences
            </summary>
            <example>
            {
            "EnableFlashUpload":"true",
            "EnableJavaUpload":"true"
            .
            .
            .
            }
            </example>
            <param name="parentUrl"></param>
            <param name="preferences"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.GetSecurity(System.Uri)">
            <summary>
            Get User Security
            </summary>
            <remarks>
            Retrieve the user security record - current state of the user regarding
            security and password settings.
            </remarks>
            <param name="url"></param>
            <returns>
            the user security status
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.ResetPassword(System.Uri,ShareFile.Api.Models.ODataObject,System.Boolean)">
            <summary>
            Reset Password
            </summary>
            <example>
            {
            "NewPassword":"new password",
            "OldPassword":"old password"
            }
            {
            "NewPassword":"new password",
            "OldPassword":"old password"
            }
            </example>
            <remarks>
            Resets a user password. A user can reset his own password providing the old and new
            passwords. Administrators can issue this call without providing the old password.
            </remarks>
            <param name="url"></param>
            <param name="properties"></param>
            <param name="notify"></param>
            <returns>
            The modified user record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.ForgotPassword(System.String,System.Boolean)">
            <summary>
            Forgot Password
            </summary>
            <remarks>
            Triggers a reset password email
            </remarks>
            <param name="email"></param>
            <param name="resetOnMobile"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.ResendWelcome(System.Uri)">
            <summary>
            Send Welcome Email
            </summary>
            <remarks>
            Resends the 'welcome' email to the given user
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.Delete(System.Uri,System.Boolean)">
            <summary>
            Delete User
            </summary>
            <remarks>
            Removes an user
            </remarks>
            <param name="url"></param>
            <param name="completely"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.GetAllSharedFolders">
            <summary>
            Get List of User Shared Folders
            </summary>
            <remarks>
            Retrieve the list of shared folders the authenticated user has access to
            </remarks>
            <returns>
            A list of Folder objects, representing shared folders of an user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.GetTopFolders">
            <summary>
            Get List of User Shared Folders
            </summary>
            <remarks>
            Retrieve the top-level folders for this user. This method requires the account to be
            in the new UI model of "My Files", "Shared", "Connectors", "Favorites" tab - otherwise
            it will return an empty list (new UX model is the default since May 2013).
            </remarks>
            <returns>
            A list of Folder objects, representing shared folders of an user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.NetworkShareConnectors">
            <summary>
            Get List of User Shared Folders
            </summary>
            <remarks>
            Retrieve the connector folders that are associated with a network share service
            </remarks>
            <returns>
            A list of Folder objects, representing network shared connector folders of an user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.SharepointConnectors">
            <summary>
            Get List of User Shared Folders
            </summary>
            <remarks>
            Retrieve the connector folders that are associated with a sharepoint service
            </remarks>
            <returns>
            A list of Folder objects, representing sharepoint folders of an user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.Confirm(ShareFile.Api.Models.UserConfirmationSettings)">
            <summary>
            Confirm the current user logging in for the first time
            </summary>
            <example>
            {
            "FirstName":"",
            "LastName":"",
            "Company":"",
            "Password":"",
            "DayLightName":"",
            "UTCOffset":"",
            "DateFormat":"",
            "TimeFormat":"",
            "EmailInterval":0
            }
            </example>
            <param name="settings"></param>
            <returns>
            no data on success
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.GetInfo">
            <summary>
            Get Current User Info
            </summary>
            <returns>
            UserInfo
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.DeleteEmailAddress(System.String)">
            <summary>
            Delete the email address from user
            </summary>
            <param name="email"></param>
            <returns>
            User
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.MakePrimary(System.String)">
            <summary>
            Set email address as the primary email address for CURRENT user
            </summary>
            <param name="email"></param>
            <returns>
            User
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.SendConfirmationEmail(System.String)">
            <summary>
            Send notification email address to this email address for verification
            </summary>
            <param name="email"></param>
            <returns>
            User
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.WebAppLink">
            <summary>
            Create a one-time use login Uri for the Web App.
            </summary>
            <returns>
            Redirection populated with link in Uri field
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.InboxMetadata(System.Uri)">
            <summary>
            Get Inbox Metadata
            </summary>
            <remarks>
            Returns metadata of the inbox.User identifier
            </remarks>
            <returns>
            Inbox metadata
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.GetInbox(System.Uri,ShareFile.Api.Models.ShareType,System.Boolean)">
            <summary>
            Get Inbox for Recipient
            </summary>
            <remarks>
            Retrieve all outstanding Shares in the inbox.User identifier
            </remarks>
            <returns>
            List of Shares created by the authenticated user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.SentMessages(System.Uri)">
            <summary>
            Get Sent Messages
            </summary>
            <remarks>
            Returns sent messages for the given user.User identifier
            </remarks>
            <returns>
            Feed of Shares
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IZonesEntity.Get(ShareFile.Api.Models.ZoneService,System.Boolean)">
            <summary>
            Get List of Zones
            </summary>
            <remarks>
            Retrieve the list of Zones accessible to the authenticated user
            This method will concatenate the list of private zones in the user's account and the
            list of public zones accessible to this account. Any user can see the list of zones.
            </remarks>
            <param name="services"></param>
            <param name="includeDisabled"></param>
            <returns>
            The list of public and private zones accessible to this user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IZonesEntity.Get(System.Uri,System.Boolean)">
            <summary>
            Get List of Zones
            </summary>
            <remarks>
            Retrieve the list of Zones accessible to the authenticated user
            This method will concatenate the list of private zones in the user's account and the
            list of public zones accessible to this account. Any user can see the list of zones.
            </remarks>
            <param name="services"></param>
            <param name="includeDisabled"></param>
            <returns>
            The list of public and private zones accessible to this user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IZonesEntity.Create(ShareFile.Api.Models.Zone)">
            <summary>
            Create Zone
            </summary>
            <example>
            {
            "Name":"Name",
            "HeartbeatTolerance":10,
            "ZoneServices":"StorageZone, SharepointConnector, NetworkShareConnector"
            }
            </example>
            <remarks>
            Creates a new Zone.
            </remarks>
            <returns>
            the created zone
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IZonesEntity.Update(System.Uri,ShareFile.Api.Models.Zone)">
            <summary>
            Update Zone
            </summary>
            <example>
            {
            "Name":"Name",
            "HeartbeatTolerance":10,
            "ZoneServices":"StorageZone, SharepointConnector, NetworkShareConnector"
            }
            </example>
            <remarks>
            Updates an existing zone
            </remarks>
            <param name="url"></param>
            <param name="zone"></param>
            <returns>
            The modified zone
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IZonesEntity.ResetSecret(System.Uri)">
            <summary>
            Reset Zone Secret
            </summary>
            <remarks>
            Resets the current Zone Secret to a new Random value
            Caution! This Call will invalidate all Storage Center communications until the Storage Center Zone secret
            is also updated.
            User must be a Zone admin to perform this action
            </remarks>
            <param name="url"></param>
            <returns>
            The modified Zone object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IZonesEntity.GetTenants(System.Uri)">
            <summary>
            Get the tenants of a multi-tenant zone
            </summary>
            <param name="parentUrl"></param>
            <returns>
            List of tenant accounts, not including the zone admin account.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IZonesEntity.CreateTenants(System.Uri,System.String)">
            <summary>
            Add a tenant account to a multi-tenant zone
            </summary>
            <param name="parentUrl"></param>
            <param name="accountId"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IZonesEntity.DeleteTenants(System.Uri,System.String,System.String,System.Boolean)">
            <summary>
            Remove a tenant from a multi-tenant zone
            </summary>
            <param name="parentUrl"></param>
            <param name="id"></param>
            <param name="newDefaultZoneId"></param>
            <param name="expireItems"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IZonesEntity.GetMetadata(System.Uri)">
            <summary>
            Get Zone Metadata
            </summary>
            <remarks>
            Gets metadata associated with the specified zone
            </remarks>
            <param name="url"></param>
            <returns>
            the zone metadata feed
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IZonesEntity.CreateMetadata(System.Uri,System.Collections.Generic.IEnumerable{ShareFile.Api.Models.Metadata})">
            <summary>
            Create or update Zone Metadata
            </summary>
            <example>
            [
            {"Name":"metadataName1", "Value":"metadataValue1", "IsPublic":"true"},
            {"Name":"metadataName2", "Value":"metadataValue2", "IsPublic":"false"},
            ...
            ]
            </example>
            <remarks>
            Creates or updates Metadata entries associated with the specified zone
            </remarks>
            <param name="url"></param>
            <param name="metadata"></param>
            <returns>
            the zone metadata feed
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IZonesEntity.DeleteMetadata(System.Uri,System.String)">
            <summary>
            Delete Zone Metadata
            </summary>
            <remarks>
            Delete the Metadata entry associated with the specified zone
            </remarks>
            <param name="url"></param>
            <param name="name"></param>
            <returns>
            no data on success
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ZonesEntity.Get(ShareFile.Api.Models.ZoneService,System.Boolean)">
            <summary>
            Get List of Zones
            </summary>
            <remarks>
            Retrieve the list of Zones accessible to the authenticated user
            This method will concatenate the list of private zones in the user's account and the
            list of public zones accessible to this account. Any user can see the list of zones.
            </remarks>
            <param name="services"></param>
            <param name="includeDisabled"></param>
            <returns>
            The list of public and private zones accessible to this user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ZonesEntity.Get(System.Uri,System.Boolean)">
            <summary>
            Get List of Zones
            </summary>
            <remarks>
            Retrieve the list of Zones accessible to the authenticated user
            This method will concatenate the list of private zones in the user's account and the
            list of public zones accessible to this account. Any user can see the list of zones.
            </remarks>
            <param name="services"></param>
            <param name="includeDisabled"></param>
            <returns>
            The list of public and private zones accessible to this user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ZonesEntity.Create(ShareFile.Api.Models.Zone)">
            <summary>
            Create Zone
            </summary>
            <example>
            {
            "Name":"Name",
            "HeartbeatTolerance":10,
            "ZoneServices":"StorageZone, SharepointConnector, NetworkShareConnector"
            }
            </example>
            <remarks>
            Creates a new Zone.
            </remarks>
            <returns>
            the created zone
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ZonesEntity.Update(System.Uri,ShareFile.Api.Models.Zone)">
            <summary>
            Update Zone
            </summary>
            <example>
            {
            "Name":"Name",
            "HeartbeatTolerance":10,
            "ZoneServices":"StorageZone, SharepointConnector, NetworkShareConnector"
            }
            </example>
            <remarks>
            Updates an existing zone
            </remarks>
            <param name="url"></param>
            <param name="zone"></param>
            <returns>
            The modified zone
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ZonesEntity.ResetSecret(System.Uri)">
            <summary>
            Reset Zone Secret
            </summary>
            <remarks>
            Resets the current Zone Secret to a new Random value
            Caution! This Call will invalidate all Storage Center communications until the Storage Center Zone secret
            is also updated.
            User must be a Zone admin to perform this action
            </remarks>
            <param name="url"></param>
            <returns>
            The modified Zone object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ZonesEntity.GetTenants(System.Uri)">
            <summary>
            Get the tenants of a multi-tenant zone
            </summary>
            <param name="parentUrl"></param>
            <returns>
            List of tenant accounts, not including the zone admin account.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ZonesEntity.CreateTenants(System.Uri,System.String)">
            <summary>
            Add a tenant account to a multi-tenant zone
            </summary>
            <param name="parentUrl"></param>
            <param name="accountId"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ZonesEntity.DeleteTenants(System.Uri,System.String,System.String,System.Boolean)">
            <summary>
            Remove a tenant from a multi-tenant zone
            </summary>
            <param name="parentUrl"></param>
            <param name="id"></param>
            <param name="newDefaultZoneId"></param>
            <param name="expireItems"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ZonesEntity.GetMetadata(System.Uri)">
            <summary>
            Get Zone Metadata
            </summary>
            <remarks>
            Gets metadata associated with the specified zone
            </remarks>
            <param name="url"></param>
            <returns>
            the zone metadata feed
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ZonesEntity.CreateMetadata(System.Uri,System.Collections.Generic.IEnumerable{ShareFile.Api.Models.Metadata})">
            <summary>
            Create or update Zone Metadata
            </summary>
            <example>
            [
            {"Name":"metadataName1", "Value":"metadataValue1", "IsPublic":"true"},
            {"Name":"metadataName2", "Value":"metadataValue2", "IsPublic":"false"},
            ...
            ]
            </example>
            <remarks>
            Creates or updates Metadata entries associated with the specified zone
            </remarks>
            <param name="url"></param>
            <param name="metadata"></param>
            <returns>
            the zone metadata feed
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ZonesEntity.DeleteMetadata(System.Uri,System.String)">
            <summary>
            Delete Zone Metadata
            </summary>
            <remarks>
            Delete the Metadata entry associated with the specified zone
            </remarks>
            <param name="url"></param>
            <param name="name"></param>
            <returns>
            no data on success
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Extensions.ItemsEntityExtensions.GetAlias(ShareFile.Api.Client.Entities.IItemsEntity,ShareFile.Api.Client.Enums.ItemAlias)">
            <summary>
            Will return a composed Uri that will point to Items(alias) for the BaseUri
            </summary>
            <returns></returns>
        </member>
        <member name="M:ShareFile.Api.Client.Extensions.ItemsEntityExtensions.GetAlias(ShareFile.Api.Client.Entities.IItemsEntity,System.String)">
            <summary>
            Will return a composed Uri that will point to Items(alias) for the BaseUri
            </summary>
            <returns></returns>
        </member>
        <member name="M:ShareFile.Api.Client.Extensions.StringExtensions.ToBase64(System.String)">
            <summary>
            Convert string to Base64 iff <paramref name="val"/> is not already encoded
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:ShareFile.Api.Client.Extensions.UriExtensions.GetQueryAsODataParameters(System.Uri)">
            <summary>
            Convert Uri.Query into collection of <see cref="T:ShareFile.Api.Client.Requests.ODataParameter"/>
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="T:ShareFile.Api.Client.Logging.Stopwatch">
            <summary>
            Portable implementation of System.Diagnostics.Stopwatch.  If you're platform provides a higher precision implementation, 
            most will, just register with the StopwatchFactory.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.ODataObject.MetadataUrl">
            <summary>
            ODATA Metadata information about the model instance
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.ODataObject.Id">
            <summary>
            Object Identifier
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AccessControl.Item">
            <summary>
            Item that was given permission through this rule
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AccessControl.CanUpload">
            <summary>
            Defines whether the principal can add files (upload) into the Item
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AccessControl.CanDownload">
            <summary>
            Defines whether the principal can read file content (download) from this Item
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AccessControl.CanView">
            <summary>
            Defines whether the principal can view items (browse) from this Item
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AccessControl.CanDelete">
            <summary>
            Defines whether the principal can remove items from this Item
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AccessControl.CanManagePermissions">
            <summary>
            Defines whether the principal can configure Access Controls in this Item
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AccessControl.NotifyOnUpload">
            <summary>
            Defines the notification preference for upload events. If set, the principal will receive
            notifications when new files are uploaded into this Item
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AccessControl.NotifyOnDownload">
            <summary>
            Defines the notification preference for download events. If set, the principal will receive
            notifiation when items are downloaded from this Item.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AccessControl.IsOwner">
            <summary>
            Defines whether the principal is the owner of this Item
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AccessControlBulkResult.SuccessEntities">
            <summary>
            A list of entities processed successfully
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AccessControlBulkResult.FailedEntities">
            <summary>
            A list of entities for which the operation failed
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AccessControlDomains.AccessControlType">
            <summary>
            Specifies that the list is interpreted as a list of allowed or disallowed domains
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AccessControlDomains.Domains">
            <summary>
            A list of domain names
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AccessControlFailedEntry.AccessControl">
            <summary>
            Entity
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AccessControlFailedEntry.Code">
            <summary>
            Failure code
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AccessControlFailedEntry.Message">
            <summary>
            Exception message
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AccessControlParam.AccessControl">
            <summary>
            AccessControl.Item is inherited from AccessControlsBulkParams and cannot be specified here
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AccessControlParam.NotifyUser">
            <summary>
            Defines whether this principal should receieve a notice on the permission grant.
            If not specified it is inherited AccessControlsBulkParams
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AccessControlParam.NotifyMessage">
            <summary>
            Custom notification message, if any
            If not specified it is inherited AccessControlsBulkParams
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AccessControlParam.Recursive">
            <summary>
            Defines whether this ACL change should be applied recursively
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AccessControlsBulkParams.NotifyUser">
            <summary>
            Defines whether the principal should receieve a notice on the permission grant.
            If an AccessControlParam doesn't specify the property it is inherited from here.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AccessControlsBulkParams.NotifyMessage">
            <summary>
            Custom notification message, if any
            If an AccessControlParam doesn't specify the property it is inherited from here.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AccessControlsBulkParams.AccessControlParams">
            <summary>
            AccessControlParams
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Account.PlanName">
            <summary>
            Basic, Professional, Enterprise
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Account.BillingType">
            <summary>
            Credit Card, Invoice, Comp
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Account.BillingCycle">
            <summary>
            Monthly, Quarterly, Annually
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Account.BaseBandwidth">
            <summary>
            Bandwidth included in plan in megabytes
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Account.BaseDiskSpace">
            <summary>
            Disk space included in megabytes
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Account.BaseUsers">
            <summary>
            Users included in plan
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Account.AdditionalBandwidth">
            <summary>
            Additional bandwidth purchased for account
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Account.AdditionalDiskSpace">
            <summary>
            Additional disk space purchased for account
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Account.AdditionalUsers">
            <summary>
            Additional users purchased for account
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Account.AdditionalBandwidthRate">
            <summary>
            Additional rate for extra bandwidth. NOTE: This is specified in gigbytes, not megabytes.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Account.AdditionalDiskSpaceRate">
            <summary>
            Additional rate for extra diskspace. NOTE: This is specified in gigbytes, not megabytes.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Account.AdditionalUserRate">
            <summary>
            Additional rate for extra users
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Account.DiskSpaceMax">
            <summary>
            Maximum disk space for the account in megabtyes
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Account.BandwidthMax">
            <summary>
            Maximum bandwidth for the account in megabtyes
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Account.PowerToolsRate">
            <summary>
            Additional rate for adding PowerTools.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Account.EncryptionRate">
            <summary>
            Additional rate for stored file encryption
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Principal.Name">
            <summary>
            User name
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Principal.Email">
            <summary>
            Email address
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Principal.Username">
            <summary>
            Username for the account - the value used for login. This is the same as Email for ShareFile accounts, but
            may be different on Connectors
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Principal.Domain">
            <summary>
            Account domain
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AdvancedSearchResults.PartialResults">
            <summary>
            Are these only partial results?
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AdvancedSearchResults.Results">
            <summary>
            Collection of search result hits
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AdvancedSearchResults.TimedOut">
            <summary>
            Did the search query timeout?
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AsyncOperation.Operation">
            <summary>
            Operation type
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AsyncOperation.Account">
            <summary>
            ShareFile Account
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AsyncOperation.AuthorityZone">
            <summary>
            Represents the Zone that is driving the asynchronous operation process. It
            may be null if the operation is driven by the control plane.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AsyncOperation.Source">
            <summary>
            Source Item for the operation.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AsyncOperation.User">
            <summary>
            User that initiated the operation
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AsyncOperation.CreationDate">
            <summary>
            Operation creation date
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AsyncOperation.State">
            <summary>
            Operation state. States 'Created' and 'Scheduled' indicate the operation is
            in progress; States 'Success' and 'Failure' indicate the operatoin is finalized
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AsyncOperation.UpdateDate">
            <summary>
            Last time the operation state was modified
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AsyncOperation.Target">
            <summary>
            Target Item for the operation.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AsyncOperation.BatchID">
            <summary>
            Batch Identifier for an asynchronous operation that includes multiple Items - for
            example, a recursive Copy will create a single AsyncOp instance per file, all sharing
            the same BatchID
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AsyncOperation.BatchSourceID">
            <summary>
            Item ID used as source for the Batch operation
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AsyncOperation.BatchTargetID">
            <summary>
            Item ID used as target for the Batch operation
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AsyncOperation.BatchProgress">
            <summary>
            BatchProgress indicates the progress of the Batch operation
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.AsyncOperation.BatchState">
            <summary>
            Batch Operation state. State 'Scheduled' indicate the operation is
            in progress; States 'Success' and 'Failure' indicate the operation is finalized
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Folder.FileCount">
            <summary>
            Number of Items defined under this Folder, including sub-folder counts.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Folder.Children">
            <summary>
            List of Children defined under this folder.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Folder.HasRemoteChildren">
            <summary>
            Defines whether the request to retreive Children is to be navigated to a remote endpoint.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Folder.Info">
            <summary>
            Effective Access Control Permissions for this Folder
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Folder.Redirection">
            <summary>
            Redirection endpoint for this Item.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Folder.FavoriteFolder">
            <summary>
            Favorite Folder object associated to this item
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.ConnectorGroup.Zones">
            <summary>
            Zones that contain this Connector type
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.ConnectorGroup.Provider">
            <summary>
            Provider identifier for this group. This is the 1st element in a ShareFile URL,
            for example - cifs for Network Shares connectors. Items in Network Share connectors
            will always have the url /cifs/vN/...
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.ConnectorGroupZone.Zone">
            <summary>
            Zone that contains this connector class
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.ConnectorGroupZone.StorageCenters">
            <summary>
            List of Storage Centers in this Zone that contain this Connector
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.ConnectorGroupZone.ApiVersionMin">
            <summary>
            Minimum API version supported by this connector group
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.ConnectorGroupZone.ApiVersionMax">
            <summary>
            Maximum API version supported by this connector group
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.ConnectorGroupZone.IconUrl">
            <summary>
            URL for the Connector Group Icon.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.ConnectorGroupZone.FormUrl">
            <summary>
            URL for the Form that creates or updates connectors
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.DeviceLogEntry.FileName">
            <summary>
            File name
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.DeviceStatus.LockedUsers">
            <summary>
            Locked users
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.DeviceStatus.UsersToWipe">
            <summary>
            Users to wipe
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.DeviceUserWipe.WipeToken">
            <summary>
            Wipe token
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.DeviceUserWipe.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.DeviceUserWipe.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.DeviceWipeReport.Logs">
            <summary>
            Logs
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.DeviceWipeReport.WipeResults">
            <summary>
            Wipe results
            </summary>
        </member>
        <member name="M:ShareFile.Api.Models.EntityTypeMap.AddEntity(System.String,System.Type)">
            <summary>
            Add additional models to the type map.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.File.FilePath">
            <summary>
            Represents the Object Storage Identifier for this File. This field is
            used in Object Storage providers - including sharefile.com and Storage Zones. Other
            providers like CIFS and SharePoint do not need external references for object
            blobs and do not populate this field.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.File.Hash">
            <summary>
            MD5 Hash of the File contents.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.File.HasPreview">
            <summary>
            Indicates that the File has an image Preview.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.File.VirusStatus">
            <summary>
            Current Anti-Virus scanning status for this file
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.File.DlpInfo">
            <summary>
            Data Loss Prevention information for this file.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.File.Info">
            <summary>
            Effective Access Control permissions for this file
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.File.LockedBy">
            <summary>
            Indicates the user that has locked the file
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.File.FileLockInfo">
            <summary>
            File lock info
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.File.Version">
            <summary>
            File version.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.File.ESignatureDocument">
            <summary>
            Electronic signature object associated with this item
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.ItemDlpInfo.Status">
            <summary>
            File scan status
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Link.Uri">
            <summary>
            Universal Reference Identifier for this Link object
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Metadata.Name">
            <summary>
            The name of a custom metadata entry
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Metadata.Value">
            <summary>
            The value of a custom metadata entry
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Metadata.IsPublic">
            <summary>
            Whether the metadata entry is public or private. Used only by the zone or storage center metadata where only zone admins have access to private metadata.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.PreviewPlatformInfo.PreviewPlatform">
            <summary>
            Indicates the Preview platform
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.PreviewPlatformInfo.ItemProtocolLink">
            <summary>
            Indicates the ItemProtocolLink for this Preview platform
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Query.ItemTypes">
            <summary>
            Types of items to search for (ex "File", "Folder", etc.)
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Query.ParentID">
            <summary>
            Parent id constraints on search results
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Query.CreatorID">
            <summary>
            Creator id constraints on search results
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Query.SearchQuery">
            <summary>
            Search term to search for
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Query.CreateStartDate">
            <summary>
            Item creation date range constraint start date in UTC
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Query.CreateEndDate">
            <summary>
            Item creation date range constraint end date in UTC
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Query.ItemNameOnly">
            <summary>
            Whether item content should be included in the search or not.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.QueryPaging.PageNumber">
            <summary>
            Deprecated, use the Skip property to skip some number of results
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.QueryPaging.PageSize">
            <summary>
            Deprecated, use the Count property
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.QueryPaging.Count">
            <summary>
            The number of search results to get
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.QueryPaging.Skip">
            <summary>
            How many results to skip before returning "Count" number results.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.QuerySorting.SortBy">
            <summary>
            What property to sort the search results by. Set to "" to not sort them
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.QuerySorting.Ascending">
            <summary>
            Whether the sort order should be ascending or not
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Report.StartDate">
            <summary>
            The Start Date of the range the ReportRecord will be run against
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Report.EndDate">
            <summary>
            The End Date of the range the ReportRecord will be run against
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.ReportRecord.StartDate">
            <summary>
            The Start Date of the range the ReportRecord will be run against
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.ReportRecord.EndDate">
            <summary>
            The End Date of the range the ReportRecord will be run against
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.ReportRecord.StartRunTime">
            <summary>
            The Time this ReportRecord began processing
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.ReportRecord.EndRunTime">
            <summary>
            The Time this ReportRecord finished processing
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.SearchQuery.Query">
            <summary>
            Information about the query to run
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.SearchQuery.Paging">
            <summary>
            Paging info about the search results
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.SearchQuery.Sort">
            <summary>
            How the search results should be sorted
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.SearchQuery.TimeoutInSeconds">
            <summary>
            Timeout for the search request in seconds
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.SearchResults.PartialResults">
            <summary>
            Are these only partial results?
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.SearchResults.Results">
            <summary>
            Collection of search result hits
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.SearchResults.TimedOut">
            <summary>
            Did the search query timeout?
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Share.AliasID">
            <summary>
            When a Share is sent to multiple users, with RequireLogin or RequireUserInfo set, then a different
            Share Alias is created for each user. The email ShareFile sends to these users will contain different
            AliasIDs, allowing ShareFile to track the user activity on the share.
            For anonymous Shares, the AliasID will be the same as the Share ID.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Share.ShareType">
            <summary>
            Either "Send" or "Request". Send Shares are used to Send files and folders to the specified users. Request
            shares are used to allow users to upload files to the share owner chosen location.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Share.Title">
            <summary>
            Share title
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Share.HasSentMessage">
            <summary>
            Flag to indicate if ShareFile has sent email messages for this Share
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Share.SentMessageTitle">
            <summary>
            Subject of Share email message
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Share.RequireLogin">
            <summary>
            If set, only authenticated users can download files from this share.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Share.RequireUserInfo">
            <summary>
            If set, users must provide Name, Email and Company information to download files from the share.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Share.Parent">
            <summary>
            Folder location that contain the share files (Send); or the folder were files will be uploaded to
            (Request).
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Share.Creator">
            <summary>
            User that created this Share.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Share.User">
            <summary>
            User given permission to use this share - used for Aliases.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Share.Items">
            <summary>
            List of shared Items (for Send Shares only)
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Share.CreationDate">
            <summary>
            Date the share was created
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Share.ExpirationDate">
            <summary>
            Date the share expires
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Share.MaxDownloads">
            <summary>
            Maximum number of downloads each user can perform.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Share.IsViewOnly">
            <summary>
            Used for Virtual Data Room accounts - indicates the files in the share can only be
            downloaded with an applied watermark.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Share.TrackUntilDate">
            <summary>
            User activity on this share will be tracked up to this date.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Share.IsConsumed">
            <summary>
            Indicates whether or not this Share has been downloaded
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Share.IsRead">
            <summary>
            Indicates whether the contents of this share have been viewed by a valid, authenticated recipient
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Share.UsesStreamIDs">
            <summary>
            When enabled the items are identified by stream IDs instead of item IDs.
            Applies to Send Shares only.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Share.Uri">
            <summary>
            Uri to access the share through the Web portal
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Share.Recipients">
            <summary>
            List of users that have access to this share.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Share.Zone">
            <summary>
            The Storage Zone that contains this Share.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Share.Signature">
            <summary>
            HMAC Signature for the Share data
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Share.HasRemoteChildren">
            <summary>
            Defines whether the request to retrieve Share Items is to be navigated to a remote endpoint.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Share.Redirection">
            <summary>
            Redirection endpoint for this Share.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Share.ShareItemHistory">
            <summary>
            Shared item history.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.Share.Settings">
            <summary>
            Current Settings for the Share
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.ShareAlias.Uri">
            <summary>
            Uri to access the share through the Web portal
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.ShareSendParams.UsesStreamIDs">
            <summary>
            When enabled the items are identified by stream IDs instead of item IDs.
            Applies to Send Shares only. (FINRA enabled accounts cannot use this)
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.SimpleQuery.ItemType">
            <summary>
            Item type to search for (ex "File", "Folder", etc.)
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.SimpleQuery.ParentID">
            <summary>
            Parent id constraint on search results
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.SimpleQuery.CreatorID">
            <summary>
            Creator id constraint on search results
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.SimpleQuery.SearchQuery">
            <summary>
            Search term to search for
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.SimpleQuery.CreateStartDate">
            <summary>
            Item creation date range constraint start date in UTC
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.SimpleQuery.CreateEndDate">
            <summary>
            Item creation date range constraint end date in UTC
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.SimpleQuery.ItemNameOnly">
            <summary>
            Whether item content should be included in the search or not.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.SimpleSearchQuery.Query">
            <summary>
            Information about the query to run
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.SimpleSearchQuery.Paging">
            <summary>
            Paging info about the search results
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.SimpleSearchQuery.Sort">
            <summary>
            How the search results should be sorted
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.SimpleSearchQuery.TimeoutInSeconds">
            <summary>
            Timeout for the search request in seconds
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.UploadSpecification.Method">
            <summary>
            The Upload method that must be used for this upload
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.UploadSpecification.PrepareUri">
            <summary>
            If provided, clients must issue a request to this Uri before uploading any data.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.UploadSpecification.ChunkUri">
            <summary>
            Specifies the URI the client must send the file data to
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.UploadSpecification.FinishUri">
            <summary>
            If provided, specifies the final call the client must perform to finish the upload process
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.UploadSpecification.ProgressData">
            <summary>
            Allows the client to check progress of standard uploads
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.UploadSpecification.IsResume">
            <summary>
            Specifies a Resumable upload is supproted.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.UploadSpecification.ResumeIndex">
            <summary>
            Specifies the initial index for resuming, if IsResume is true.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.UploadSpecification.ResumeOffset">
            <summary>
            Specifies the initial file offset by bytes, if IsResume is true
            </summary>
        </member>
        <member name="P:ShareFile.Api.Models.UploadSpecification.ResumeFileHash">
            <summary>
            Specifies the MD5 hash of the first ResumeOffset bytes of the partial file found at the server
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Requests.Filters.AndFilter">
            <summary>
            OData Filter for ANDing two filters
            </summary>
        </member>
        <member name="M:ShareFile.Api.Client.Requests.Filters.BooleanFilter.#ctor(ShareFile.Api.Client.Requests.Filters.IFilter,ShareFile.Api.Client.Requests.Filters.IFilter,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ShareFile.Api.Client.Requests.Filters.BooleanFilter"/> class.
            </summary>
            <param name="left">Filter for the left hand side of binaryOperation</param>
            <param name="right">Filter for the right hand side of binaryOperation</param>
            <param name="binaryOperator">Desired binary operator</param>
        </member>
        <member name="M:ShareFile.Api.Client.Requests.Filters.BooleanFilter.ToString">
            <summary>
            Compute the filter for use.
            </summary>
            <returns>Constructed filter with <see cref="P:ShareFile.Api.Client.Requests.Filters.BooleanFilter.Left"/> and <see cref="P:ShareFile.Api.Client.Requests.Filters.BooleanFilter.Right"/> filters applied</returns>
        </member>
        <member name="M:ShareFile.Api.Client.Requests.Filters.AndFilter.#ctor(ShareFile.Api.Client.Requests.Filters.IFilter,ShareFile.Api.Client.Requests.Filters.IFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:ShareFile.Api.Client.Requests.Filters.AndFilter"/> class.
            </summary>
            <param name="left">Left hand side of the filter</param>
            <param name="right">Right hand side of the filter</param>
        </member>
        <member name="T:ShareFile.Api.Client.Requests.Filters.OrFilter">
            <summary>
            OData Filter for ORing two filters
            </summary>
        </member>
        <member name="M:ShareFile.Api.Client.Requests.Filters.OrFilter.#ctor(ShareFile.Api.Client.Requests.Filters.IFilter,ShareFile.Api.Client.Requests.Filters.IFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:ShareFile.Api.Client.Requests.Filters.OrFilter"/> class.
            </summary>
            <param name="left">Left hand side of the filter</param>
            <param name="right">Right hand side of the filter</param>
        </member>
        <member name="M:ShareFile.Api.Client.Requests.IQuery`1.Filter(ShareFile.Api.Client.Requests.Filters.IFilter)">
            <summary>
            If a Filter has already been added, it will implicitly converted to a <see cref="T:ShareFile.Api.Client.Requests.Filters.AndFilter"/> 
            with the existing filter as Left and <param name="filter"></param> as Right.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="F:ShareFile.Api.Client.Requests.Providers.BaseRequestProvider.RuntimeRequiresCustomCookieHandling">
            <summary>
            Set this flag True if running as a Portable Class Library
            </summary>
        </member>
        <member name="M:ShareFile.Api.Client.Requests.Query`1.Filter(ShareFile.Api.Client.Requests.Filters.IFilter)">
            <summary>
            If a Filter has already been added, it will implicitly converted to a <see cref="T:ShareFile.Api.Client.Requests.Filters.AndFilter"/> 
            with the existing filter as Left and <param name="filter"></param> as Right.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ShareFile.Api.Client.Requests.ApiRequest.IsUri(System.String,System.Uri@)">
            <summary>
            Check if the provided id is a fully qualified <see cref="P:ShareFile.Api.Client.Requests.ApiRequest.Uri"/>
            </summary>
            <param name="id"></param>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="P:ShareFile.Api.Client.Requests.ApiRequest.IsComposed">
            <summary>
            Indicates whether or not the Uri has been composed.
            </summary>
        </member>
        <member name="M:ShareFile.Api.Client.Security.Cryptography.PortableMD5HashProvider.BytesToHex(System.Byte[])">
            <summary>
            Returns the hexadecimal representation of a string.
            </summary>
            <param name="data">Bytes to convert to hex</param>
            <returns>Lowercase hex string of those bytes</returns>
        </member>
        <member name="T:ShareFile.Api.Client.Security.Cryptography.IDigest">
            interface that a message digest conforms to.
        </member>
        <member name="M:ShareFile.Api.Client.Security.Cryptography.IDigest.GetDigestSize">
             return the size, in bytes, of the digest produced by this message digest.
            
             @return the size, in bytes, of the digest produced by this message digest.
        </member>
        <member name="M:ShareFile.Api.Client.Security.Cryptography.IDigest.GetByteLength">
             return the size, in bytes, of the internal buffer used by this digest.
            
             @return the size, in bytes, of the internal buffer used by this digest.
        </member>
        <member name="M:ShareFile.Api.Client.Security.Cryptography.IDigest.Update(System.Byte)">
             update the message digest with a single byte.
            
             @param inByte the input byte to be entered.
        </member>
        <member name="M:ShareFile.Api.Client.Security.Cryptography.IDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
             update the message digest with a block of bytes.
            
             @param input the byte array containing the data.
             @param inOff the offset into the byte array where the data starts.
             @param len the length of the data.
        </member>
        <member name="M:ShareFile.Api.Client.Security.Cryptography.IDigest.DoFinal(System.Byte[],System.Int32)">
             Close the digest, producing the final digest Message. The doFinal
             call leaves the digest reset.
            
             @param output the array the digest is to be copied into.
             @param outOff the offset into the out array the digest is to start at.
        </member>
        <member name="M:ShareFile.Api.Client.Security.Cryptography.IDigest.Reset">
            reset the digest back to it's initial state.
        </member>
        <member name="P:ShareFile.Api.Client.Security.Cryptography.IDigest.AlgorithmName">
             return the algorithm name
            
             @return the algorithm name
        </member>
        <member name="T:ShareFile.Api.Client.Security.Cryptography.MD5Digest">
            implementation of MD5 as outlined in "Handbook of Applied Cryptography", pages 346 - 347.
        </member>
        <member name="M:ShareFile.Api.Client.Security.Cryptography.MD5Digest.#ctor(ShareFile.Api.Client.Security.Cryptography.MD5Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:ShareFile.Api.Client.Security.Cryptography.MD5Digest.Reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="M:ShareFile.Api.Client.IShareFileClient.AddAuthenticationId(System.Uri,System.String,System.String,System.String)">
            <summary>
            Use this method if you've previously acquired an AuthenticationId through other means.
            </summary>
            <param name="host"></param>
            <param name="authenticationId"></param>
            <param name="path"></param>
            <param name="cookieName"></param>
        </member>
        <member name="M:ShareFile.Api.Client.IShareFileClient.AddCredentials(System.Uri,System.String,System.Net.NetworkCredential)">
            <summary>
            
            </summary>
            <param name="uri"></param>
            <param name="authenticationType"></param>
            <param name="networkCredential"></param>
        </member>
        <member name="M:ShareFile.Api.Client.IShareFileClient.AddOAuthCredentials(System.Uri,System.String)">
            <summary>
            </summary>
            <param name="host"></param>
            <param name="oauthToken"></param>
        </member>
        <member name="M:ShareFile.Api.Client.IShareFileClient.AddOAuthCredentials(ShareFile.Api.Client.Security.Authentication.OAuth2.OAuthToken)">
            <summary>
            </summary>
            <param name="oauthToken"></param>
        </member>
        <member name="M:ShareFile.Api.Client.IShareFileClient.RegisterType``2">
            <summary>
            Substitute TNew for TReplace when instantiating TReplace for responses.
            Helpful if you need some additional properties on responses to work with.
            </summary>
            <typeparam name="TNew"></typeparam>
            <typeparam name="TReplace"></typeparam>
        </member>
        <member name="M:ShareFile.Api.Client.ShareFileClient.PreprocessUploadSpecRequest(ShareFile.Api.Client.Transfers.UploadSpecificationRequest)">
            <summary>
            Use some naive metrics for deciding which <see cref="T:ShareFile.Api.Models.UploadMethod"/>  should be used.
            </summary>
            <param name="uploadSpecificationRequest"></param>
        </member>
        <member name="M:ShareFile.Api.Client.ShareFileClient.GetAsyncFileUploader(ShareFile.Api.Client.Transfers.UploadSpecificationRequest,ShareFile.Api.Client.FileSystem.IPlatformFile,ShareFile.Api.Client.Transfers.Uploaders.FileUploaderConfig,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="uploadSpecificationRequest"></param>
            <param name="file"></param>
            <param name="config"></param>
            <param name="expirationDays">Will only be obeyed by ShareFile apps</param>
            <returns></returns>
        </member>
        <member name="M:ShareFile.Api.Client.ShareFileClient.GetFileUploader(ShareFile.Api.Client.Transfers.UploadSpecificationRequest,ShareFile.Api.Client.FileSystem.IPlatformFile,ShareFile.Api.Client.Transfers.Uploaders.FileUploaderConfig,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="uploadSpecificationRequest"></param>
            <param name="file"></param>
            <param name="config"></param>
            <param name="expirationDays">Will only be obeyed by ShareFile apps</param>
            <returns></returns>
        </member>
        <member name="M:ShareFile.Api.Client.ShareFileClient.AddAuthenticationId(System.Uri,System.String,System.String,System.String)">
            <summary>
            Use this method if you've previously acquired an AuthenticationId through other means.
            </summary>
            <param name="host"></param>
            <param name="authenticationId"></param>
            <param name="path"></param>
            <param name="cookieName"></param>
        </member>
        <member name="M:ShareFile.Api.Client.ShareFileClient.RegisterType``2">
            <summary>
            Substitute TNew for TReplace when instantiating TReplace for responses.
            </summary>
            <typeparam name="TNew"></typeparam>
            <typeparam name="TReplace"></typeparam>
        </member>
        <member name="M:ShareFile.Api.Client.ShareFileClient.AddCredentials(System.Uri,System.String,System.Net.NetworkCredential)">
            <summary>
            
            </summary>
            <param name="uri"></param>
            <param name="authenticationType"></param>
            <param name="networkCredential"></param>
        </member>
        <member name="M:ShareFile.Api.Client.ShareFileClient.AddOAuthCredentials(System.Uri,System.String)">
            <summary>
            </summary>
            <param name="host"></param>
            <param name="oauthToken"></param>
        </member>
        <member name="M:ShareFile.Api.Client.ShareFileClient.AddOAuthCredentials(ShareFile.Api.Client.Security.Authentication.OAuth2.OAuthToken)">
            <summary>
            </summary>
            <param name="oauthToken"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Transfers.Uploaders.UploaderBase.GetChunkUriForStandardUploads">
            <summary>
            Use specifically for Standard Uploads. The API call isn't guaranteed to include fmt=json on the query string
            this is necessary to get file metadata back as part of the upload response.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ShareFile.Api.Client.Transfers.UploadSpecificationRequest.ToRequestParams">
            <summary>
            Convert to <see cref="T:ShareFile.Api.Models.UploadRequestParams"/> used for Upload2.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ShareFile.Api.Client.Transfers.UploadSpecificationRequest.Raw">
            <summary>
            Set is no longer supported; value will be overwritten during uploader constructor
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Transfers.UploadSpecificationRequest.ForceUnique">
            <summary>
            Will make a best effort to ensure a file is uploaded by modifying 
            FileName if it encounters a collision.  This is NOT supported on all
            providers.
            </summary>
        </member>
    </members>
</doc>
